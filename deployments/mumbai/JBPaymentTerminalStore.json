{
  "address": "0x346ae80CE75BEe1B690F2949D1137F6664D1aCa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IJBPrices",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "_fundingCycleStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBTokenStore",
          "name": "_tokenStore",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CURRENCY_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_AMOUNT_LIMIT_REACHED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FUNDING_CYCLE_DISTRIBUTION_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FUNDING_CYCLE_PAYMENT_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FUNDING_CYCLE_REDEEM_PAUSED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INADEQUATE_CONTROLLER_ALLOWANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_TOKENS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_FUNDING_CYCLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        }
      ],
      "name": "currentTotalOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingCycleStore",
      "outputs": [
        {
          "internalType": "contract IJBFundingCycleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prices",
      "outputs": [
        {
          "internalType": "contract IJBPrices",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        }
      ],
      "name": "reclaimableOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recordAddedBalanceFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceCurrency",
          "type": "uint256"
        }
      ],
      "name": "recordDistributionFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "recordMigration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currency",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBTokenAmount",
          "name": "_amount",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseWeightCurrency",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "recordPaymentFrom",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPayDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceCurrency",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "recordRedemptionFor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "reclaimAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBRedemptionDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "memo",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceCurrency",
          "type": "uint256"
        }
      ],
      "name": "recordUsedAllowanceOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "configuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basedOn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discountRate",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBFundingCycleBallot",
              "name": "ballot",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "metadata",
              "type": "uint256"
            }
          ],
          "internalType": "struct JBFundingCycle",
          "name": "fundingCycle",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenStore",
      "outputs": [
        {
          "internalType": "contract IJBTokenStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedDistributionLimitOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedOverflowAllowanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbdfccbd8dde71e55daab44711891fb80d73fef4a35e6f13d4589d825c236b0c9",
  "receipt": {
    "to": null,
    "from": "0x5E5C527003B3fE8f5512bC78545e182e0405Ba78",
    "contractAddress": "0x346ae80CE75BEe1B690F2949D1137F6664D1aCa3",
    "transactionIndex": 2,
    "gasUsed": "3188634",
    "logsBloom": "0x
    "blockHash": "0x3e522fd2b2c13d1d6b1eff8d9a2c40d583c12d346c98b3e571dac5106e9f6f89",
    "transactionHash": "0xbdfccbd8dde71e55daab44711891fb80d73fef4a35e6f13d4589d825c236b0c9",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 25633028,
        "transactionHash": "0xbdfccbd8dde71e55daab44711891fb80d73fef4a35e6f13d4589d825c236b0c9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005e5c527003b3fe8f5512bc78545e182e0405ba78",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000018106e36cf0737a000000000000000000000000000000000000000000000000039376c97e0673100000000000000000000000000000000000000000000008c53c86833029847f8d00000000000000000000000000000000000000000000000002126fe61115ff960000000000000000000000000000000000000000000008c53e078a139674f307",
        "logIndex": 104,
        "blockHash": "0x3e522fd2b2c13d1d6b1eff8d9a2c40d583c12d346c98b3e571dac5106e9f6f89"
      }
    ],
    "blockNumber": 25633028,
    "cumulativeGasUsed": "4467525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d45E2691dD969C2C84E91D8F163a001CC9624E4",
    "0x9f6B993D2b05088317d123E6B56Dd4444E7F016A",
    "0xf8beb62B8ae1cE8053D5A3B6d66C4f1a8ef36F4a",
    "0xBe1828896f862113DA7A699473967aa72a177F0F",
    "0x77a6a0E3bDD9B34A13d4827d7CCA9F304b7B0819"
  ],
  "numDeployments": 1,
  "solcInputHash": "0136ddce72e9b07c45f37ebabcbc8b52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IJBPrices\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"_fundingCycleStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBTokenStore\",\"name\":\"_tokenStore\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CURRENCY_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_AMOUNT_LIMIT_REACHED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUNDING_CYCLE_DISTRIBUTION_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUNDING_CYCLE_PAYMENT_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FUNDING_CYCLE_REDEEM_PAUSED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INADEQUATE_CONTROLLER_ALLOWANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_TOKENS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_FUNDING_CYCLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"}],\"name\":\"currentTotalOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCycleStore\",\"outputs\":[{\"internalType\":\"contract IJBFundingCycleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"contract IJBPrices\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"reclaimableOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recordAddedBalanceFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceCurrency\",\"type\":\"uint256\"}],\"name\":\"recordDistributionFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"recordMigration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBTokenAmount\",\"name\":\"_amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseWeightCurrency\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"recordPaymentFrom\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPayDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceCurrency\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"recordRedemptionFor\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"reclaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBRedemptionDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceCurrency\",\"type\":\"uint256\"}],\"name\":\"recordUsedAllowanceOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basedOn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRate\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBFundingCycleBallot\",\"name\":\"ballot\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"metadata\",\"type\":\"uint256\"}],\"internalType\":\"struct JBFundingCycle\",\"name\":\"fundingCycle\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStore\",\"outputs\":[{\"internalType\":\"contract IJBTokenStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedDistributionLimitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedOverflowAllowanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_directory\":\"A contract storing directories of terminals and controllers for each project.\",\"_fundingCycleStore\":\"A contract storing all funding cycle configurations.\",\"_prices\":\"A contract that exposes price feeds.\",\"_projects\":\"A contract which mints ERC-721's that represent project ownership and transfers.\",\"_tokenStore\":\"A contract that manages token minting and burning.\"}},\"currentOverflowOf(address,uint256)\":{\"details\":\"The current overflow is represented as a fixed point number with 18 decimals.\",\"params\":{\"_projectId\":\"The ID of the project to get overflow for.\",\"_terminal\":\"The terminal for which the overflow is being calculated.\"},\"returns\":{\"_0\":\"The current amount of overflow that project has in this terminal.\"}},\"currentTotalOverflowOf(uint256,uint256,uint256)\":{\"details\":\"The current total overflow is represented as a fixed point number with 18 decimals.\",\"params\":{\"_currency\":\"The currency that the total overflow should be in terms of.\",\"_decimals\":\"The number of decimals that the fixed point overflow should include.\",\"_projectId\":\"The ID of the project to get total overflow for.\"},\"returns\":{\"_0\":\"The current total amount of overflow that project has across all terminals.\"}},\"reclaimableOverflowOf(address,uint256,uint256)\":{\"details\":\" If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.The reclaimable overflow is represented as a fixed point number with 18 decimals.\",\"params\":{\"_projectId\":\"The ID of the project to get a reclaimable amount for.\",\"_terminal\":\"The terminal from which the overflow is being calculated.\",\"_tokenCount\":\"The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\"},\"returns\":{\"_0\":\"The amount of overflowed tokens that can be reclaimed.\"}},\"recordAddedBalanceFor(uint256,uint256)\":{\"details\":\"The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\",\"params\":{\"_amount\":\"The amount of temrinal tokens added, as a fixed point number with 18 decimals.\",\"_projectId\":\"The ID of the project to which the funds being added belong.\"},\"returns\":{\"fundingCycle\":\"The current funding cycle for the project.\"}},\"recordDistributionFor(uint256,uint256,uint256,uint256)\":{\"details\":\"The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\",\"params\":{\"_amount\":\"The amount to use from the distribution limit, as a fixed point number. i\",\"_balanceCurrency\":\"The currency that the balance is expected to be in terms of.\",\"_currency\":\"The currency of the `_amount`.\",\"_projectId\":\"The ID of the project that is having funds distributed.\"},\"returns\":{\"distributedAmount\":\"The amount of terminal tokens distributed.\",\"fundingCycle\":\"The funding cycle during which the distribution was made.\"}},\"recordMigration(uint256)\":{\"details\":\"The msg.sender must be an IJBPaymentTerminal. The amount returned is in terms of the msg.senders tokens.\",\"params\":{\"_projectId\":\"The ID of the project being migrated.\"},\"returns\":{\"balance\":\"The project's current terminal token balance, as a fixed point number with 18 decimals.\"}},\"recordPaymentFrom(address,(address,uint256,uint256,uint256),uint256,address,uint256,string,bytes)\":{\"details\":\"Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\",\"params\":{\"_amount\":\"The amount of tokens being paid, as a fixed point number. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\",\"_baseWeightCurrency\":\"The currency to base token issuance on.\",\"_beneficiary\":\"The address that should receive benefits from the payment.\",\"_memo\":\"A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\",\"_metadata\":\"Bytes to send along to the data source, if one is provided.\",\"_payer\":\"The original address that sent the payment to the terminal.\",\"_projectId\":\"The ID of the project being paid.\"},\"returns\":{\"delegate\":\"A delegate contract to use for subsequent calls.\",\"fundingCycle\":\"The project's funding cycle during which payment was made.\",\"memo\":\"A memo that should be passed along to the emitted event.\",\"tokenCount\":\"The number of project tokens that were minted, as a fixed point number with 18 decimals.\"}},\"recordRedemptionFor(address,uint256,uint256,uint256,uint256,address,string,bytes)\":{\"details\":\"The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\",\"params\":{\"_balanceCurrency\":\"The currency that the stored balance is expected to be in terms of.\",\"_balanceDecimals\":\"The amount of decimals expected in the returned `reclaimAmount`.\",\"_beneficiary\":\"The address that will benefit from the claimed amount.\",\"_holder\":\"The account that is having its tokens redeemed.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_metadata\":\"Bytes to send along to the data source, if one is provided.\",\"_projectId\":\"The ID of the project to which the tokens being redeemed belong.\",\"_tokenCount\":\"The number of project tokens to redeem, as a fixed point number with 18 decimals.\"},\"returns\":{\"delegate\":\"A delegate contract to use for subsequent calls.\",\"fundingCycle\":\"The funding cycle during which the redemption was made.\",\"memo\":\"A memo that should be passed along to the emitted event.\",\"reclaimAmount\":\"The amount of terminal tokens reclaimed, as a fixed point number with 18 decimals.\"}},\"recordUsedAllowanceOf(uint256,uint256,uint256,uint256)\":{\"details\":\"The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\",\"params\":{\"_amount\":\"The amount to use from the allowance, as a fixed point number. \",\"_balanceCurrency\":\"The currency that the balance is expected to be in terms of.\",\"_currency\":\"The currency of the `_amount`.\",\"_projectId\":\"The ID of the project to use the allowance of.\"},\"returns\":{\"fundingCycle\":\"The funding cycle during which the withdrawal is being made.\",\"withdrawnAmount\":\"The amount terminal tokens used, as a fixed point number with 18 decimals.\"}}},\"stateVariables\":{\"balanceOf\":{\"details\":\"The balance is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the balance applies. _projectId The ID of the project to get the balance of.\"},\"usedDistributionLimitOf\":{\"details\":\"Increases as projects use their distribution limit.The used distribution limit is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the used distribution limit applies. _projectId The ID of the project to get the used distribution limit of. _fundingCycleNumber The number representing the funding cycle.\"},\"usedOverflowAllowanceOf\":{\"details\":\"Increases as projects use their allowance.The used allowance is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the overflow allowance applies. _projectId The ID of the project to get the used overflow allowance of. _configuration The configuration of the during which the allowance applies.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"The amount of tokens that each project has for each terminal, in terms of the terminal's token.\"},\"currentOverflowOf(address,uint256)\":{\"notice\":\"Gets the current overflowed amount in a terminal for a specified project.\"},\"currentTotalOverflowOf(uint256,uint256,uint256)\":{\"notice\":\"Gets the current overflowed amount for a specified project across all terminals.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"fundingCycleStore()\":{\"notice\":\"The contract storing all funding cycle configurations.\"},\"prices()\":{\"notice\":\"The contract that exposes price feeds.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"reclaimableOverflowOf(address,uint256,uint256)\":{\"notice\":\"The amount of overflowed tokens that can be reclaimed by the specified number of tokens.\"},\"recordAddedBalanceFor(uint256,uint256)\":{\"notice\":\"Records newly added funds for the project.\"},\"recordDistributionFor(uint256,uint256,uint256,uint256)\":{\"notice\":\"Records newly distributed funds for a project.\"},\"recordMigration(uint256)\":{\"notice\":\"Records the migration of funds from this store.\"},\"recordPaymentFrom(address,(address,uint256,uint256,uint256),uint256,address,uint256,string,bytes)\":{\"notice\":\"Records newly contributed tokens to a project.\"},\"recordRedemptionFor(address,uint256,uint256,uint256,uint256,address,string,bytes)\":{\"notice\":\"Records newly redeemed tokens of a project.\"},\"recordUsedAllowanceOf(uint256,uint256,uint256,uint256)\":{\"notice\":\"Records newly used allowance funds of a project.\"},\"tokenStore()\":{\"notice\":\"The contract that manages token minting and burning.\"},\"usedDistributionLimitOf(address,uint256,uint256)\":{\"notice\":\"The amount of tokens that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the terminal's token.\"},\"usedOverflowAllowanceOf(address,uint256,uint256)\":{\"notice\":\"The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the terminal's token.\"}},\"notice\":\"This contract manages all bookkeeping for inflows and outflows of a particular token for any IJBPaymentTerminal msg.sender.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBPaymentTerminalStore.sol\":\"JBPaymentTerminalStore\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495\",\"license\":\"Unlicense\"},\"contracts/JBPaymentTerminalStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable comprehensive-interface*/\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\n\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\nimport './libraries/JBFixedPointNumber.sol';\\n\\nimport './structs/JBTokenAmount.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror CURRENCY_MISMATCH();\\nerror DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\nerror FUNDING_CYCLE_PAYMENT_PAUSED();\\nerror FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\nerror FUNDING_CYCLE_REDEEM_PAUSED();\\nerror INADEQUATE_CONTROLLER_ALLOWANCE();\\nerror INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\nerror INSUFFICIENT_TOKENS();\\nerror INVALID_FUNDING_CYCLE();\\nerror PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\nerror PAYMENT_TERMINAL_UNAUTHORIZED();\\nerror STORE_ALREADY_CLAIMED();\\n\\n/**\\n  @notice\\n  This contract manages all bookkeeping for inflows and outflows of a particular token for any IJBPaymentTerminal msg.sender.\\n*/\\ncontract JBPaymentTerminalStore {\\n  // A library that parses the packed funding cycle metadata into a friendlier format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A library that provides utility for fixed point numbers.\\n  using JBFixedPointNumber for uint256;\\n\\n  /**\\n    @notice\\n    Ensures up to 18 decimal points of persisted fidelity on mulDiv operations of fixed point numbers. \\n  */\\n  uint256 private constant _FIXED_POINT_MAX_FIDELITY = 18;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /**\\n    @notice\\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /**\\n    @notice\\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The amount of tokens that each project has for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    The balance is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the balance applies.\\n    _projectId The ID of the project to get the balance of.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => uint256)) public balanceOf;\\n\\n  /**\\n    @notice\\n    The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    Increases as projects use their allowance.\\n\\n    @dev\\n    The used allowance is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the overflow allowance applies.\\n    _projectId The ID of the project to get the used overflow allowance of.\\n    _configuration The configuration of the during which the allowance applies.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\\n    public usedOverflowAllowanceOf;\\n\\n  /**\\n    @notice\\n    The amount of tokens that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    Increases as projects use their distribution limit.\\n\\n    @dev\\n    The used distribution limit is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the used distribution limit applies.\\n    _projectId The ID of the project to get the used distribution limit of.\\n    _fundingCycleNumber The number representing the funding cycle.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\\n    public usedDistributionLimitOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount in a terminal for a specified project.\\n\\n    @dev\\n    The current overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _terminal The terminal for which the overflow is being calculated.\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of overflow that project has in this terminal.\\n  */\\n  function currentOverflowOf(IJBPaymentTerminal _terminal, uint256 _projectId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _overflowDuring(_terminal, _projectId, _fundingCycle, _terminal.currency());\\n  }\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount for a specified project across all terminals.\\n\\n    @dev\\n    The current total overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _decimals The number of decimals that the fixed point overflow should include.\\n    @param _currency The currency that the total overflow should be in terms of.\\n\\n    @return The current total amount of overflow that project has across all terminals.\\n  */\\n  function currentTotalOverflowOf(\\n    uint256 _projectId,\\n    uint256 _decimals,\\n    uint256 _currency\\n  ) external view returns (uint256) {\\n    return _currentTotalOverflowOf(_projectId, _decimals, _currency);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflowed tokens that can be reclaimed by the specified number of tokens.\\n\\n    @dev \\n    If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\\n\\n    @dev\\n    The reclaimable overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _terminal The terminal from which the overflow is being calculated.\\n    @param _projectId The ID of the project to get a reclaimable amount for.\\n    @param _tokenCount The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\\n\\n    @return The amount of overflowed tokens that can be reclaimed.\\n  */\\n  function reclaimableOverflowOf(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    uint256 _tokenCount\\n  ) external view returns (uint256) {\\n    return\\n      _reclaimableOverflowOf(\\n        _terminal,\\n        _projectId,\\n        fundingCycleStore.currentOf(_projectId),\\n        _tokenCount,\\n        _terminal.decimals(),\\n        _terminal.currency()\\n      );\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _prices A contract that exposes price feeds.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n  */\\n  constructor(\\n    IJBPrices _prices,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore\\n  ) {\\n    prices = _prices;\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Records newly contributed tokens to a project.\\n\\n    @dev\\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _payer The original address that sent the payment to the terminal.\\n    @param _amount The amount of tokens being paid, as a fixed point number. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n    @param _projectId The ID of the project being paid.\\n    @param _beneficiary The address that should receive benefits from the payment.\\n    @param _baseWeightCurrency The currency to base token issuance on.\\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\\n    @param _metadata Bytes to send along to the data source, if one is provided.\\n\\n    @return fundingCycle The project's funding cycle during which payment was made.\\n    @return tokenCount The number of project tokens that were minted, as a fixed point number with 18 decimals.\\n    @return delegate A delegate contract to use for subsequent calls.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordPaymentFrom(\\n    address _payer,\\n    JBTokenAmount memory _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _baseWeightCurrency,\\n    string memory _memo,\\n    bytes memory _metadata\\n  )\\n    external\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 tokenCount,\\n      IJBPayDelegate delegate,\\n      string memory memo\\n    )\\n  {\\n    // Get a reference to the current funding cycle for the project.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The project must have a funding cycle configured.\\n    if (fundingCycle.number == 0) revert INVALID_FUNDING_CYCLE();\\n\\n    // Must not be paused.\\n    if (fundingCycle.payPaused()) revert FUNDING_CYCLE_PAYMENT_PAUSED();\\n\\n    // The weight according to which new token supply is to be minted, as a fixed point number with 18 decimals.\\n    uint256 _weight;\\n\\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\\n    if (fundingCycle.useDataSourceForPay()) {\\n      (_weight, memo, delegate) = fundingCycle.dataSource().payParams(\\n        JBPayParamsData(\\n          IJBPaymentTerminal(msg.sender),\\n          _payer,\\n          _amount,\\n          _projectId,\\n          fundingCycle.weight,\\n          fundingCycle.reservedRate(),\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        )\\n      );\\n    }\\n    // Otherwise use the funding cycle's weight\\n    else {\\n      _weight = fundingCycle.weight;\\n      memo = _memo;\\n    }\\n\\n    // If there's no amount being recorded, there's nothing left to do.\\n    if (_amount.value == 0) return (fundingCycle, 0, delegate, memo);\\n\\n    // Add the amount to the token balance of the project if needed.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] +\\n      _amount.value;\\n\\n    // If there's no weight, token count must be 0 so there's nothing left to do.\\n    if (_weight == 0) return (fundingCycle, 0, delegate, memo);\\n\\n    // If the terminal should base its weight on a different currency from the terminal's currency, determine the factor.\\n    // The weight is always a fixed point mumber with 18 decimals. The ratio should be the same.\\n    uint256 _weightRatio = _amount.currency == _baseWeightCurrency\\n      ? 10**_amount.decimals // Use `_amount.decimals` to make sure the resulting `tokenCount` keeps the same decimal fidelity as `weight`.\\n      : prices.priceFor(_amount.currency, _baseWeightCurrency, _amount.decimals);\\n\\n    // Find the number of tokens to mint, as a fixed point number with as many decimals as `weight` has.\\n    tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio);\\n  }\\n\\n  /**\\n    @notice\\n    Records newly distributed funds for a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project that is having funds distributed.\\n    @param _amount The amount to use from the distribution limit, as a fixed point number. i\\n    @param _currency The currency of the `_amount`.\\n    @param _balanceCurrency The currency that the balance is expected to be in terms of.\\n\\n    @return fundingCycle The funding cycle during which the distribution was made.\\n    @return distributedAmount The amount of terminal tokens distributed.\\n  */\\n  function recordDistributionFor(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _balanceCurrency\\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount) {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The funding cycle must not be configured to have distributions paused.\\n    if (fundingCycle.distributionsPaused()) revert FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\n\\n    // The new total amount that has been distributed during this funding cycle.\\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[IJBPaymentTerminal(msg.sender)][\\n      _projectId\\n    ][fundingCycle.number] + _amount;\\n\\n    // Amount must be within what is still distributable.\\n    uint256 _distributionLimitOf = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      fundingCycle.configuration,\\n      IJBPaymentTerminal(msg.sender)\\n    );\\n\\n    if (_newUsedDistributionLimitOf > _distributionLimitOf || _distributionLimitOf == 0)\\n      revert DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).distributionLimitCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        IJBPaymentTerminal(msg.sender)\\n      )\\n    ) revert CURRENCY_MISMATCH();\\n\\n    // Convert the amount to the balance's currency.\\n    distributedAmount = (_currency == _balanceCurrency) ? _amount : distributedAmount = PRBMath\\n      .mulDiv(\\n        _amount,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_currency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // The amount being distributed must be available.\\n    if (distributedAmount > balanceOf[IJBPaymentTerminal(msg.sender)][_projectId])\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Store the new amount.\\n    usedDistributionLimitOf[IJBPaymentTerminal(msg.sender)][_projectId][\\n      fundingCycle.number\\n    ] = _newUsedDistributionLimitOf;\\n\\n    // Removed the distributed funds from the project's token balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n      distributedAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly used allowance funds of a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount to use from the allowance, as a fixed point number. \\n    @param _currency The currency of the `_amount`.\\n    @param _balanceCurrency The currency that the balance is expected to be in terms of.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\\n    @return withdrawnAmount The amount terminal tokens used, as a fixed point number with 18 decimals.\\n  */\\n  function recordUsedAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _balanceCurrency\\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount) {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Get a reference to the new used overflow allowance.\\n    uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[IJBPaymentTerminal(msg.sender)][\\n      _projectId\\n    ][fundingCycle.configuration] + _amount;\\n\\n    // There must be sufficient allowance available.\\n    uint256 _allowanceOf = directory.controllerOf(_projectId).overflowAllowanceOf(\\n      _projectId,\\n      fundingCycle.configuration,\\n      IJBPaymentTerminal(msg.sender)\\n    );\\n\\n    if (_newUsedOverflowAllowanceOf > _allowanceOf || _allowanceOf == 0)\\n      revert INADEQUATE_CONTROLLER_ALLOWANCE();\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).overflowAllowanceCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        IJBPaymentTerminal(msg.sender)\\n      )\\n    ) revert CURRENCY_MISMATCH();\\n\\n    // Convert the amount to this store's terminal's token.\\n    withdrawnAmount = (_currency == _balanceCurrency)\\n      ? _amount\\n      : PRBMath.mulDiv(\\n        _amount,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_currency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // The amount being withdrawn must be available in the overflow.\\n    if (\\n      withdrawnAmount >\\n      _overflowDuring(IJBPaymentTerminal(msg.sender), _projectId, fundingCycle, _balanceCurrency)\\n    ) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Store the incremented value.\\n    usedOverflowAllowanceOf[IJBPaymentTerminal(msg.sender)][_projectId][\\n      fundingCycle.configuration\\n    ] = _newUsedOverflowAllowanceOf;\\n\\n    // Update the project's token balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n      withdrawnAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly redeemed tokens of a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _holder The account that is having its tokens redeemed.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\\n    @param _balanceDecimals The amount of decimals expected in the returned `reclaimAmount`.\\n    @param _balanceCurrency The currency that the stored balance is expected to be in terms of.\\n    @param _beneficiary The address that will benefit from the claimed amount.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _metadata Bytes to send along to the data source, if one is provided.\\n\\n    @return fundingCycle The funding cycle during which the redemption was made.\\n    @return reclaimAmount The amount of terminal tokens reclaimed, as a fixed point number with 18 decimals.\\n    @return delegate A delegate contract to use for subsequent calls.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordRedemptionFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _balanceDecimals,\\n    uint256 _balanceCurrency,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _metadata\\n  )\\n    external\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 reclaimAmount,\\n      IJBRedemptionDelegate delegate,\\n      string memory memo\\n    )\\n  {\\n    // The holder must have the specified number of the project's tokens.\\n    if (tokenStore.balanceOf(_holder, _projectId) < _tokenCount) revert INSUFFICIENT_TOKENS();\\n\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    if (fundingCycle.redeemPaused()) revert FUNDING_CYCLE_REDEEM_PAUSED();\\n\\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\\n    if (fundingCycle.useDataSourceForRedeem())\\n      (reclaimAmount, memo, delegate) = fundingCycle.dataSource().redeemParams(\\n        JBRedeemParamsData(\\n          IJBPaymentTerminal(msg.sender),\\n          _holder,\\n          _tokenCount,\\n          _balanceDecimals,\\n          _projectId,\\n          fundingCycle.redemptionRate(),\\n          fundingCycle.ballotRedemptionRate(),\\n          _balanceCurrency,\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        )\\n      );\\n    else {\\n      reclaimAmount = _reclaimableOverflowOf(\\n        IJBPaymentTerminal(msg.sender),\\n        _projectId,\\n        fundingCycle,\\n        _tokenCount,\\n        _balanceDecimals,\\n        _balanceCurrency\\n      );\\n      memo = _memo;\\n    }\\n\\n    // The amount being reclaimed must be within the project's balance.\\n    if (reclaimAmount > balanceOf[IJBPaymentTerminal(msg.sender)][_projectId])\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Remove the reclaimed funds from the project's balance.\\n    if (reclaimAmount > 0)\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n        balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n        reclaimAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly added funds for the project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project to which the funds being added belong.\\n    @param _amount The amount of temrinal tokens added, as a fixed point number with 18 decimals.\\n\\n    @return fundingCycle The current funding cycle for the project.\\n  */\\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Increment the balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] +\\n      _amount;\\n  }\\n\\n  /**\\n    @notice\\n    Records the migration of funds from this store.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount returned is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project being migrated.\\n\\n    @return balance The project's current terminal token balance, as a fixed point number with 18 decimals.\\n  */\\n  function recordMigration(uint256 _projectId) external returns (uint256 balance) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    if (!_fundingCycle.terminalMigrationAllowed()) revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\n\\n    // Return the current balance.\\n    balance = balanceOf[IJBPaymentTerminal(msg.sender)][_projectId];\\n\\n    // Set the balance to 0.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] = 0;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `reclaimableOverflowOf`\\n  */\\n  function _reclaimableOverflowOf(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _tokenCount,\\n    uint256 _balanceDecimals,\\n    uint256 _balanceCurrency\\n  ) private view returns (uint256) {\\n    // Get the amount of current overflow.\\n    // Use the local overflow if the funding cycle specifies that it should be used. Otherwise use the project's total overflow across all of its terminals.\\n    uint256 _currentOverflow = _fundingCycle.shouldUseLocalBalanceForRedemptions()\\n      ? _overflowDuring(_terminal, _projectId, _fundingCycle, _balanceCurrency)\\n      : _currentTotalOverflowOf(_projectId, _balanceDecimals, _balanceCurrency);\\n\\n    // If there is no overflow, nothing is claimable.\\n    if (_currentOverflow == 0) return 0;\\n\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = directory.controllerOf(_projectId).reservedTokenBalanceOf(\\n      _projectId,\\n      _fundingCycle.reservedRate()\\n    );\\n\\n    // If there are reserved tokens, add them to the total supply.\\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\\n\\n    // If the amount being redeemed is the total supply, return the rest of the overflow.\\n    if (_tokenCount == _totalSupply) return _currentOverflow;\\n\\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\\n      JBBallotState.Active\\n      ? _fundingCycle.ballotRedemptionRate()\\n      : _fundingCycle.redemptionRate();\\n\\n    // If the redemption rate is 0, nothing is claimable.\\n    if (_redemptionRate == 0) return 0;\\n\\n    // Get a reference to the linear proportion.\\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\\n\\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\\n    if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base;\\n\\n    return\\n      PRBMath.mulDiv(\\n        _base,\\n        _redemptionRate +\\n          PRBMath.mulDiv(\\n            _tokenCount,\\n            JBConstants.MAX_REDEMPTION_RATE - _redemptionRate,\\n            _totalSupply\\n          ),\\n        JBConstants.MAX_REDEMPTION_RATE\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of the terminal's token changes in relation to the currency being used to measure the distribution limit.\\n\\n    @param _terminal The terminal for which the overflow is being calculated.\\n    @param _projectId The ID of the project to get overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n    @param _balanceCurrency The currency that the stored balance is expected to be in terms of.\\n\\n    @return overflow The overflow of funds, as a fixed point number with 18 decimals.\\n  */\\n  function _overflowDuring(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _balanceCurrency\\n  ) private view returns (uint256) {\\n    // Get the current balance of the project.\\n    uint256 _balanceOf = balanceOf[_terminal][_projectId];\\n\\n    // If there's no balance, there's no overflow.\\n    if (_balanceOf == 0) return 0;\\n\\n    // Get a reference to the amount still withdrawable during the funding cycle.\\n    uint256 _distributionRemaining = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      _terminal\\n    ) - usedDistributionLimitOf[_terminal][_projectId][_fundingCycle.number];\\n\\n    // Get a reference to the current funding cycle's currency for this terminal.\\n    uint256 _distributionLimitCurrency = directory\\n      .controllerOf(_projectId)\\n      .distributionLimitCurrencyOf(_projectId, _fundingCycle.configuration, _terminal);\\n\\n    // Convert the _distributionRemaining to be in terms of the provided currency.\\n    if (_distributionRemaining != 0 && _distributionLimitCurrency != _balanceCurrency)\\n      _distributionRemaining = PRBMath.mulDiv(\\n        _distributionRemaining,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_distributionLimitCurrency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return _balanceOf > _distributionRemaining ? _balanceOf - _distributionRemaining : 0;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing across all terminals in terms of this store's terminal's currency when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of the token changes in relation to the currency being used to measure the distribution limits.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _decimals The number of decimals that the fixed point overflow should include.\\n    @param _currency The currency that the overflow should be in terms of.\\n\\n    @return overflow The overflow of funds, as a fixed point number with 18 decimals\\n  */\\n  function _currentTotalOverflowOf(\\n    uint256 _projectId,\\n    uint256 _decimals,\\n    uint256 _currency\\n  ) private view returns (uint256) {\\n    // Get a reference to the project's terminals.\\n    IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId);\\n\\n    // Keep a reference to the ETH overflow across all terminals, as a fixed point number with 18 decimals.\\n    uint256 _ethOverflow;\\n\\n    // Add the current ETH overflow for each terminal.\\n    for (uint256 _i = 0; _i < _terminals.length; _i++)\\n      _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId);\\n\\n    // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals.\\n    uint256 _totalOverflow18Decimal = _currency == JBCurrencies.ETH\\n      ? _ethOverflow\\n      : PRBMath.mulDiv(_ethOverflow, 10**18, prices.priceFor(JBCurrencies.ETH, _currency, 18));\\n\\n    // Adjust the decimals of the fixed point number if needed to match the target decimals.\\n    return\\n      (_decimals == 18)\\n        ? _totalOverflow18Decimal\\n        : _totalOverflow18Decimal.adjustDecimals(18, _decimals);\\n  }\\n}\\n\",\"keccak256\":\"0x72fb1f3ea2c0a92a15885a03a6625db5bac832f6b205b21157db131451559cd2\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b6f58f353fda8548d2d8df209cd1c8b6f4bdd948c18cc4836f9c6cf6f9a0365\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(\\n    uint256 indexed projectId,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\\n\\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetController(address _address) external view returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function addToSetControllerAllowlist(address _address) external;\\n\\n  function removeFromSetControllerAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xf0a97fc3d99d7270f4a4bdbf775f15f9551636ebdffe03d65a92140ac6c45c5f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _projectId, uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x9d8c9b9f1c66e7c923cc8e9518fb06b4180fea51f376ba39bc4a15171e5219aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 reclaimAmount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate\\n    );\\n}\\n\",\"keccak256\":\"0x7126a0e53e4a1325dff9cde62b5a3a8c9d2a62b6fce785dc3f4094db948417d4\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function currency() external view returns (uint256);\\n\\n  function baseWeightCurrency() external view returns (uint256);\\n\\n  function payoutSplitsGroup() external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable;\\n\\n  function addToBalanceOf(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    string memory _memo\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x26e1135c6279d68d0dd485edb042eb9c0c8946ae6a17c3039241ec3483a96a92\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac22ef5e35cdd64b1467416fd142801856ce867ecde41582f3aa437c955c9be2\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPriceFeed.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed);\\n\\n  function priceFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    uint256 _decimals\\n  ) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    IJBPriceFeed _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d9c3fce264953aaeca00db1f8d8a3cf99876fa63366f5a2148f7966967b39b7\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x4482009111379531b33b6d924760987a6a68c83eeb71092d74fccd65960ca5ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x688d18bdbccb02a12874a0657661905a734ae1c9572c9b16ce076225a19a0b7e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed newToken,\\n    IJBToken indexed oldToken,\\n    address owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external returns (IJBToken oldToken);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x53264aaec59002551df79886591b1b7a53e8d01c64e31eea677945e828ee0259\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum fee rate as a percentage out of 1000000000\\n  */\\n  uint256 public constant MAX_FEE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0xc673508855053695e9d1310cb259b2de0910058d3eeab98137a4550ca75f7383\",\"license\":\"MIT\"},\"contracts/libraries/JBCurrencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBCurrencies {\\n  uint256 public constant ETH = 1;\\n  uint256 public constant USD = 2;\\n}\\n\",\"keccak256\":\"0x3077e365b09d45e3a82d6710bfda7323a0366c3cafc318ea9dc442a1a93036d7\",\"license\":\"MIT\"},\"contracts/libraries/JBFixedPointNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFixedPointNumber {\\n  function adjustDecimals(\\n    uint256 _value,\\n    uint256 _decimals,\\n    uint256 _targetDecimals\\n  ) internal pure returns (uint256) {\\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\\n    if (_targetDecimals == _decimals) return _value;\\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\\n    else return _value / 10**(_decimals - _targetDecimals);\\n  }\\n}\\n\",\"keccak256\":\"0x279117420e7b46f973cae89bdb3806d9cc1c13790a568c7e3876bf78e6777080\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\\n  }\\n\\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // reserved rate in bits 8-23 (16 bits).\\n    packed |= _metadata.reservedRate << 8;\\n    // redemption rate in bits 24-39 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\\n    // ballot redemption rate rate in bits 40-55 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\\n    // pause pay in bit 56.\\n    if (_metadata.pausePay) packed |= 1 << 56;\\n    // pause tap in bit 57.\\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\\n    // pause redeem in bit 58.\\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\\n    // pause mint in bit 59.\\n    if (_metadata.pauseMint) packed |= 1 << 59;\\n    // pause mint in bit 60.\\n    if (_metadata.pauseBurn) packed |= 1 << 60;\\n    // pause change token in bit 61.\\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\\n    // allow terminal migration in bit 62.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\\n    // allow controller migration in bit 63.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\\n    // hold fees in bit 64.\\n    if (_metadata.holdFees) packed |= 1 << 64;\\n    // useLocalBalanceForRedemptions in bit 65.\\n    if (_metadata.useLocalBalanceForRedemptions) packed |= 1 << 65;\\n    // use pay data source in bit 66.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\\n    // use redeem data source in bit 67.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0x454ada2c970e4270ef05ac18d06d751eef8cc6d65432b932683a50c708f26eba\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant CHANGE_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant TRANSFER = 11;\\n  uint256 public constant REQUIRE_CLAIM = 12;\\n  uint256 public constant SET_CONTROLLER = 13;\\n  uint256 public constant ADD_TERMINALS = 14;\\n  uint256 public constant REMOVE_TERMINAL = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x585c8deb3bf2bc3fba0a3ca3b8d2b93e17915805b0ce3685641307db121fba1e\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The number of project tokens minted for the beneficiary.\\n  uint256 projectTokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xc9854f845a2aca0953e1c850d40fa8c930638e1e0ebfaea103c93c8500150bbb\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of project tokens being redeemed.\\n  uint256 projectTokenCount;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount reclaimedAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9e656b4698364f127d0bd9e7e5f249de053e193d2db73de2fb8cec503a837024\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x8ff64289216ea89220cc828df7d0ca1a363286c71a158faddd1b3161958b190e\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xc68e73a33a605bab8bd4fa260833e7ba3b539f90e96f43b4851a33e53811eb2d\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\\n  bool useLocalBalanceForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x63043118e450fc2ef17ca0f772afcf3016104ade23fa84fff788a74821a72186\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBPayParamsData {\\n  // The terminal that is facilitating the payment.\\n  IJBPaymentTerminal terminal;\\n  // The address from which the payment originated.\\n  address payer;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // Arbitrary metadata provided by the payer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x2deef9bad4e9786248e64572aebff17a1ed621e89d7f592fa1964d4f5dcea543\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBRedeemParamsData {\\n  // The terminal that is facilitating the redemption.\\n  IJBPaymentTerminal terminal;\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The number of decimals included in the `reclaimAmount` fixed point number that should be returned.\\n  uint256 decimals;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The currency that the stored balance is expected to be in terms of.\\n  uint256 currency;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Arbitrary metadata provided by the redeemer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xd6e6a992369de9f53f1a09bf93dfc6b80db9d1c7edc21bd1e809feb63a9d4f54\",\"license\":\"MIT\"},\"contracts/structs/JBTokenAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBTokenAmount {\\n  // The token the payment was made in.\\n  address token;\\n  // The amount of tokens that was paid, as a fixed point number.\\n  uint256 value;\\n  // The number of decimals included in th `amount` fixed point number.\\n  uint256 decimals;\\n  // The expected currency index of the value in reference to JBPRices feeds.\\n  uint256 currency;\\n}\\n\",\"keccak256\":\"0x0eb6f20e710d678740adc9c566bf9d861239f2d6b93ad78dc42ec55791995a3b\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162003aff38038062003aff83398101604081905262000035916200006d565b6001600160601b0319606095861b81166101005293851b841660805291841b831660a052831b821660c05290911b1660e05262000106565b600080600080600060a086880312156200008657600080fd5b85516200009381620000ed565b6020870151909550620000a681620000ed565b6040870151909450620000b981620000ed565b6060870151909350620000cc81620000ed565b6080870151909250620000df81620000ed565b809150509295509295909350565b6001600160a01b03811681146200010357600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c613904620001fb600039600081816102c30152818161088f01528181611aec015281816123530152612a3301526000818161021501528181610a9901526124710152600081816101b60152818161041101528181610b7901528181610f13015281816114400152818161163f0152818161179101528181611c0a01528181611dae01526126dd01526000818161029c01528181610520015281816106c101528181611065015281816112060152818161203c015281816121c10152818161254a01526128590152600061026201526139046000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e01c80638910c7da116100b2578063d3419bf311610081578063d4c3a8d211610066578063d4c3a8d2146102f8578063e7c8e3e314610329578063e8ba563a1461034957600080fd5b8063d3419bf3146102be578063d49031c0146102e557600080fd5b80638910c7da1461024a5780638b79543c1461025d578063b753d7e914610284578063c41c2f241461029757600080fd5b8063557e7155116100ee578063557e7155146101b157806359087958146101fd57806361930630146102105780636bb6a5ad1461023757600080fd5b8062fdd58e1461011f5780631837d6e31461015a5780634a35c01c1461017b5780634d9cd5ac1461019e575b600080fd5b61014761012d366004612e39565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b61016d610168366004613016565b61037a565b60405161015192919061310c565b61018e610189366004612cb3565b6109df565b6040516101519493929190613194565b61016d6101ac366004613016565b610e7c565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b61014761020b366004612e65565b611437565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b610147610245366004612f3b565b6115f6565b61018e610258366004612ba5565b611725565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b610147610292366004612fea565b611bb4565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6101476102f3366004612e39565b611bc1565b610147610306366004612e65565b600160209081526000938452604080852082529284528284209052825290205481565b61033c610337366004612fc8565b611d1a565b6040516101519190613092565b610147610357366004612e65565b600260209081526000938452604080852082529284528284209052825290205481565b6103df60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561046957600080fd5b505afa15801561047d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a19190612ebb565b3360009081526001602090815260408083208a84528252808320828501518452909152812054919350906104d6908790613587565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810189905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190612e1c565b60208501516040517f5172a2bf000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635172a2bf9060640160206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190612f54565b90508082118061065b575080155b15610692576040517fb6ecab1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190612e1c565b60208501516040517f073d499c000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff919091169063073d499c9060640160206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612f54565b861461083b576040517fe56ea4e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861461092957610924876108526012600a61363b565b6040517fa4d0caf2000000000000000000000000000000000000000000000000000000008152600481018a905260248101899052601260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf2906064015b60206040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190612f54565b611e87565b61092b565b865b925061093933898688611f90565b831115610972576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526001602090815260408083208c8452825280832088830151845282528083208690559282528181528282208b8352905220546109b590849061373e565b336000908152602081815260408083209b83529a9052989098209790975550909590945092505050565b610a4460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905260009182916060918b917f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9060440160206040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190612f54565b1015610b4a576040517fb8af220000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610bd157600080fd5b505afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190612ebb565b610100810151909450603a1c60019081161415610c52576040517fa97cf58f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160431c60019081161415610dc35761010084015160441c73ffffffffffffffffffffffffffffffffffffffff1663690bb9d36040518061016001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018e8152602001610ce9886123c0565b8152602001610cf7886123dd565b81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152506040518263ffffffff1660e01b8152600401610d449190613390565b60006040518083038186803b158015610d5c57600080fd5b505afa158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610db69190810190612f6d565b9194509092509050610dd7565b610dd1338c868d8d8d6123fa565b92508590505b336000908152602081815260408083208e8452909152902054831115610e29576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8215610e6d57336000908152602081815260408083208e8452909152902054610e5390849061373e565b336000908152602081815260408083208f84529091529020555b98509850985098945050505050565b610ee160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190612ebb565b61010081015190925060391c60019081161415610fec576040517f861e9dcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260026020908152604080832089845282528083208551845290915281205461101b908790613587565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810189905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190612e1c565b60208501516040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635578dfd79060640160206040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190612f54565b9050808211806111a0575080155b156111d7576040517f08dae4ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612e1c565b60208501516040517f4e9d00d2000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690634e9d00d29060640160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190612f54565b8614611380576040517fe56ea4e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861461139f57611397876108526012600a61363b565b9250826113a1565b865b336000908152602081815260408083208c84529091529020549093508311156113f6576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526002602090815260408083208c845282528083208851845282528083208690559282528181528282208b8352905220546109b590849061373e565b60006115ec84847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c2876040518263ffffffff1660e01b815260040161149991815260200190565b6101206040518083038186803b1580156114b257600080fd5b505afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea9190612ebb565b858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561153157600080fd5b505afa158015611545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115699190612f54565b8973ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e79190612f54565b6123fa565b90505b9392505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190612ebb565b610100810151909150603e1c600190811614611702576040517fe7c9e0be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505033600090815260208181526040808320938352929052908120805491905590565b61178a60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c28a6040518263ffffffff1660e01b81526004016117ea91815260200190565b6101206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612ebb565b8051909450611876576040517f2e96671a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160381c600190811614156118bc576040517fa3bb913300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160009060421c60019081161415611a2b5761010085015160441c73ffffffffffffffffffffffffffffffffffffffff1663c474e40e6040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018d81526020018860a00151815260200161196789610100015161ffff60089190911c1690565b81526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152506040518263ffffffff1660e01b81526004016119ae9190613245565b60006040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a209190810190612f6d565b945092509050611a35565b505060a083015185905b60208b0151611a48575060009250611ba6565b6020808c015133600090815280835260408082208e83529093529190912054611a719190613587565b336000908152602081815260408083208e845290915290205580611a99575060009250611ba6565b6000888c6060015114611b805760608c01516040808e015190517fa4d0caf20000000000000000000000000000000000000000000000000000000081526004810192909252602482018b905260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf29060640160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612f54565b611b90565b60408c0151611b9090600a61363b565b9050611ba18c602001518383611e87565b945050505b975097509750979350505050565b60006115ec848484612810565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b158015611c4d57600080fd5b505afa158015611c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c859190612ebb565b9050611d108484838773ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190612f54565b611f90565b9150505b92915050565b611d7f60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611e0657600080fd5b505afa158015611e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3e9190612ebb565b33600090815260208181526040808320878452909152902054909150611e65908390613587565b3360009081526020818152604080832096835295905293909320929092555090565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611ee057838281611ed657611ed66137ed565b04925050506115ef565b838110611f27576040517f773cc18c000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260440160405180910390fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020818152604080832086845290915281205480611fce5760009150506123b8565b73ffffffffffffffffffffffffffffffffffffffff86811660009081526002602090815260408083208984528252808320885184529091528082205490517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101899052919290917f000000000000000000000000000000000000000000000000000000000000000090911690635dd8f6aa9060240160206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b89190612e1c565b60208701516040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018a9052602481019190915273ffffffffffffffffffffffffffffffffffffffff8a811660448301529190911690635578dfd79060640160206040518083038186803b15801561213557600080fd5b505afa158015612149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216d9190612f54565b612177919061373e565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810188905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561220357600080fd5b505afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b9190612e1c565b60208701516040517f4e9d00d2000000000000000000000000000000000000000000000000000000008152600481018a9052602481019190915273ffffffffffffffffffffffffffffffffffffffff8a811660448301529190911690634e9d00d29060640160206040518083038186803b1580156122b857600080fd5b505afa1580156122cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f09190612f54565b905081158015906123015750848114155b1561239a57612397826123166012600a61363b565b6040517fa4d0caf20000000000000000000000000000000000000000000000000000000081526004810185905260248101899052601260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf2906064016108cf565b91505b8183116123a85760006123b2565b6123b2828461373e565b93505050505b949350505050565b60006018826101000151901c61ffff16612710611d14919061373e565b60006028826101000151901c61ffff16612710611d14919061373e565b610100840151600090819060411c6001908116146124225761241d878585612810565b61242e565b61242e88888886611f90565b90508061243f576000915050612806565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125009190612f54565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018a905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561258c57600080fd5b505afa1580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c49190612e1c565b73ffffffffffffffffffffffffffffffffffffffff1663f033b3b48a6125f68b610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015260440160206040518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126829190612f54565b90508015612697576126948183613587565b91505b818714156126aa57829350505050612806565b600060016040517fc55f571c000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c55f571c9060240160206040518083038186803b15801561273457600080fd5b505afa158015612748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276c9190612e9a565b600281111561277d5761277d61381c565b146127905761278b896123c0565b612799565b612799896123dd565b9050806127ad576000945050505050612806565b60006127ba858a86611e87565b90506127108214156127d25794506128069350505050565b6127fe816127ec8b6127e68661271061373e565b88611e87565b6127f69085613587565b612710611e87565b955050505050505b9695505050505050565b6040517fd175415300000000000000000000000000000000000000000000000000000000815260048101849052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d17541539060240160006040518083038186803b15801561289b57600080fd5b505afa1580156128af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526128f59190810190612d63565b90506000805b82518110156129c6578281815181106129165761291661384b565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a32e1e96886040518263ffffffff1660e01b815260040161295891815260200190565b60206040518083038186803b15801561297057600080fd5b505afa158015612984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a89190612f54565b6129b29083613587565b9150806129be81613785565b9150506128fb565b50600060018514612a67576040517fa4d0caf2000000000000000000000000000000000000000000000000000000008152600160048201526024810186905260126044820152612a62908390670de0b6b3a76400009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a4d0caf2906064016108cf565b612a69565b815b905085601214612a8457612a7f81601288612a91565b612a86565b805b979650505050505050565b600082821415612aa25750826115ef565b82821115612ad057612ab4838361373e565b612abf90600a61363b565b612ac99085613701565b90506115ef565b612ada828461373e565b612ae590600a61363b565b612ac9908561359f565b8035612afa816138a9565b919050565b600082601f830112612b1057600080fd5b8135612b23612b1e82613541565b6134f2565b818152846020838601011115612b3857600080fd5b816020850160208301376000918101602001919091529392505050565b8051612afa816138a9565b600082601f830112612b7157600080fd5b8151612b7f612b1e82613541565b818152846020838601011115612b9457600080fd5b6123b8826020830160208701613755565b6000806000806000806000878903610140811215612bc257600080fd5b8835612bcd816138a9565b975060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215612bff57600080fd5b50612c086134a5565b6020890135612c16816138a9565b808252506040890135602082015260608901356040820152608089013560608201528096505060a08801359450612c4f60c08901612aef565b935060e0880135925061010088013567ffffffffffffffff80821115612c7457600080fd5b612c808b838c01612aff565b93506101208a0135915080821115612c9757600080fd5b50612ca48a828b01612aff565b91505092959891949750929550565b600080600080600080600080610100898b031215612cd057600080fd5b8835612cdb816138a9565b97506020890135965060408901359550606089013594506080890135935060a0890135612d07816138a9565b925060c089013567ffffffffffffffff80821115612d2457600080fd5b612d308c838d01612aff565b935060e08b0135915080821115612d4657600080fd5b50612d538b828c01612aff565b9150509295985092959890939650565b60006020808385031215612d7657600080fd5b825167ffffffffffffffff80821115612d8e57600080fd5b818501915085601f830112612da257600080fd5b815181811115612db457612db461387a565b8060051b9150612dc58483016134f2565b8181528481019084860184860187018a1015612de057600080fd5b600095505b83861015612e0f5780519450612dfa856138a9565b84835260019590950194918601918601612de5565b5098975050505050505050565b600060208284031215612e2e57600080fd5b81516115ef816138a9565b60008060408385031215612e4c57600080fd5b8235612e57816138a9565b946020939093013593505050565b600080600060608486031215612e7a57600080fd5b8335612e85816138a9565b95602085013595506040909401359392505050565b600060208284031215612eac57600080fd5b8151600381106115ef57600080fd5b60006101208284031215612ece57600080fd5b612ed66134ce565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152612f2260e08401612b55565b60e0820152610100928301519281019290925250919050565b600060208284031215612f4d57600080fd5b5035919050565b600060208284031215612f6657600080fd5b5051919050565b600080600060608486031215612f8257600080fd5b83519250602084015167ffffffffffffffff811115612fa057600080fd5b612fac86828701612b60565b9250506040840151612fbd816138a9565b809150509250925092565b60008060408385031215612fdb57600080fd5b50508035926020909101359150565b600080600060608486031215612fff57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561302c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613060816020860160208601613755565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6101208101611d148284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b61014081016131868285805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b826101208301529392505050565b600061018061320e8388805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b8561012084015273ffffffffffffffffffffffffffffffffffffffff851661014084015280610160840152612a8681840185613048565b6020815261326c60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151613295604084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516132df606084018273ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301525050565b50606083015160e08301526080830151610100818185015260a085015161012085015260c0850151915061332c61014085018373ffffffffffffffffffffffffffffffffffffffff169052565b60e085015191506101808061016086015261334b6101a0860184613048565b92508186015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08584030181860152506133878282613048565b95945050505050565b602081526133b760208201835173ffffffffffffffffffffffffffffffffffffffff169052565b600060208301516133e0604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012061344b8185018373ffffffffffffffffffffffffffffffffffffffff169052565b80850151915050610160610140818186015261346b610180860184613048565b908601518582037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001838701529092506128068382613048565b6040516080810167ffffffffffffffff811182821017156134c8576134c861387a565b60405290565b604051610120810167ffffffffffffffff811182821017156134c8576134c861387a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135395761353961387a565b604052919050565b600067ffffffffffffffff82111561355b5761355b61387a565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000821982111561359a5761359a6137be565b500190565b6000826135d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561363357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613619576136196137be565b8085161561362657918102915b93841c93908002906135df565b509250929050565b60006115ef838360008261365157506001611d14565b8161365e57506000611d14565b8160018114613674576002811461367e5761369a565b6001915050611d14565b60ff84111561368f5761368f6137be565b50506001821b611d14565b5060208310610133831016604e8410600b84101617156136bd575081810a611d14565b6136c783836135da565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136f9576136f96137be565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613739576137396137be565b500290565b600082821015613750576137506137be565b500390565b60005b83811015613770578181015183820152602001613758565b8381111561377f576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137b7576137b76137be565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138cb57600080fd5b5056fea264697066735822122099d9435fe69a6753ab83a57565f17ab8f160f492cd29a3cf380c80142011cf8364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011a5760003560e01c80638910c7da116100b2578063d3419bf311610081578063d4c3a8d211610066578063d4c3a8d2146102f8578063e7c8e3e314610329578063e8ba563a1461034957600080fd5b8063d3419bf3146102be578063d49031c0146102e557600080fd5b80638910c7da1461024a5780638b79543c1461025d578063b753d7e914610284578063c41c2f241461029757600080fd5b8063557e7155116100ee578063557e7155146101b157806359087958146101fd57806361930630146102105780636bb6a5ad1461023757600080fd5b8062fdd58e1461011f5780631837d6e31461015a5780634a35c01c1461017b5780634d9cd5ac1461019e575b600080fd5b61014761012d366004612e39565b600060208181529281526040808220909352908152205481565b6040519081526020015b60405180910390f35b61016d610168366004613016565b61037a565b60405161015192919061310c565b61018e610189366004612cb3565b6109df565b6040516101519493929190613194565b61016d6101ac366004613016565b610e7c565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b61014761020b366004612e65565b611437565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b610147610245366004612f3b565b6115f6565b61018e610258366004612ba5565b611725565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b610147610292366004612fea565b611bb4565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6101d87f000000000000000000000000000000000000000000000000000000000000000081565b6101476102f3366004612e39565b611bc1565b610147610306366004612e65565b600160209081526000938452604080852082529284528284209052825290205481565b61033c610337366004612fc8565b611d1a565b6040516101519190613092565b610147610357366004612e65565b600260209081526000938452604080852082529284528284209052825290205481565b6103df60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b15801561046957600080fd5b505afa15801561047d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a19190612ebb565b3360009081526001602090815260408083208a84528252808320828501518452909152812054919350906104d6908790613587565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810189905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561056257600080fd5b505afa158015610576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059a9190612e1c565b60208501516040517f5172a2bf000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635172a2bf9060640160206040518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190612f54565b90508082118061065b575080155b15610692576040517fb6ecab1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107509190612e1c565b60208501516040517f073d499c000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff919091169063073d499c9060640160206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612f54565b861461083b576040517fe56ea4e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861461092957610924876108526012600a61363b565b6040517fa4d0caf2000000000000000000000000000000000000000000000000000000008152600481018a905260248101899052601260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf2906064015b60206040518083038186803b1580156108e757600080fd5b505afa1580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f9190612f54565b611e87565b61092b565b865b925061093933898688611f90565b831115610972576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526001602090815260408083208c8452825280832088830151845282528083208690559282528181528282208b8352905220546109b590849061373e565b336000908152602081815260408083209b83529a9052989098209790975550909590945092505050565b610a4460405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905260009182916060918b917f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9060440160206040518083038186803b158015610ada57600080fd5b505afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190612f54565b1015610b4a576040517fb8af220000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610bd157600080fd5b505afa158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190612ebb565b610100810151909450603a1c60019081161415610c52576040517fa97cf58f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160431c60019081161415610dc35761010084015160441c73ffffffffffffffffffffffffffffffffffffffff1663690bb9d36040518061016001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018c81526020018e8152602001610ce9886123c0565b8152602001610cf7886123dd565b81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff168152602001898152602001888152506040518263ffffffff1660e01b8152600401610d449190613390565b60006040518083038186803b158015610d5c57600080fd5b505afa158015610d70573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610db69190810190612f6d565b9194509092509050610dd7565b610dd1338c868d8d8d6123fa565b92508590505b336000908152602081815260408083208e8452909152902054831115610e29576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8215610e6d57336000908152602081815260408083208e8452909152902054610e5390849061373e565b336000908152602081815260408083208f84529091529020555b98509850985098945050505050565b610ee160405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190612ebb565b61010081015190925060391c60019081161415610fec576040517f861e9dcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260026020908152604080832089845282528083208551845290915281205461101b908790613587565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810189905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df9190612e1c565b60208501516040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690635578dfd79060640160206040518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190612f54565b9050808211806111a0575080155b156111d7576040517f08dae4ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018990527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b15801561125d57600080fd5b505afa158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190612e1c565b60208501516040517f4e9d00d2000000000000000000000000000000000000000000000000000000008152600481018b9052602481019190915233604482015273ffffffffffffffffffffffffffffffffffffffff9190911690634e9d00d29060640160206040518083038186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113489190612f54565b8614611380576040517fe56ea4e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84861461139f57611397876108526012600a61363b565b9250826113a1565b865b336000908152602081815260408083208c84529091529020549093508311156113f6576040517f2fca7ece00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360008181526002602090815260408083208c845282528083208851845282528083208690559282528181528282208b8352905220546109b590849061373e565b60006115ec84847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c2876040518263ffffffff1660e01b815260040161149991815260200190565b6101206040518083038186803b1580156114b257600080fd5b505afa1580156114c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ea9190612ebb565b858873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561153157600080fd5b505afa158015611545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115699190612f54565b8973ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115af57600080fd5b505afa1580156115c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e79190612f54565b6123fa565b90505b9392505050565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba9190612ebb565b610100810151909150603e1c600190811614611702576040517fe7c9e0be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505033600090815260208181526040808320938352929052908120805491905590565b61178a60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166343a266c28a6040518263ffffffff1660e01b81526004016117ea91815260200190565b6101206040518083038186803b15801561180357600080fd5b505afa158015611817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183b9190612ebb565b8051909450611876576040517f2e96671a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160381c600190811614156118bc576040517fa3bb913300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61010084015160009060421c60019081161415611a2b5761010085015160441c73ffffffffffffffffffffffffffffffffffffffff1663c474e40e6040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018f73ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018d81526020018860a00151815260200161196789610100015161ffff60089190911c1690565b81526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018a8152602001898152506040518263ffffffff1660e01b81526004016119ae9190613245565b60006040518083038186803b1580156119c657600080fd5b505afa1580156119da573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a209190810190612f6d565b945092509050611a35565b505060a083015185905b60208b0151611a48575060009250611ba6565b6020808c015133600090815280835260408082208e83529093529190912054611a719190613587565b336000908152602081815260408083208e845290915290205580611a99575060009250611ba6565b6000888c6060015114611b805760608c01516040808e015190517fa4d0caf20000000000000000000000000000000000000000000000000000000081526004810192909252602482018b905260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf29060640160206040518083038186803b158015611b4357600080fd5b505afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612f54565b611b90565b60408c0151611b9090600a61363b565b9050611ba18c602001518383611e87565b945050505b975097509750979350505050565b60006115ec848484612810565b6040517f43a266c200000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906343a266c2906024016101206040518083038186803b158015611c4d57600080fd5b505afa158015611c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c859190612ebb565b9050611d108484838773ffffffffffffffffffffffffffffffffffffffff1663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd357600080fd5b505afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b9190612f54565b611f90565b9150505b92915050565b611d7f60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6040517f43a266c2000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906343a266c2906024016101206040518083038186803b158015611e0657600080fd5b505afa158015611e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3e9190612ebb565b33600090815260208181526040808320878452909152902054909150611e65908390613587565b3360009081526020818152604080832096835295905293909320929092555090565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8587098587029250828110838203039150508060001415611ee057838281611ed657611ed66137ed565b04925050506115ef565b838110611f27576040517f773cc18c000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260440160405180910390fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020818152604080832086845290915281205480611fce5760009150506123b8565b73ffffffffffffffffffffffffffffffffffffffff86811660009081526002602090815260408083208984528252808320885184529091528082205490517f5dd8f6aa00000000000000000000000000000000000000000000000000000000815260048101899052919290917f000000000000000000000000000000000000000000000000000000000000000090911690635dd8f6aa9060240160206040518083038186803b15801561208057600080fd5b505afa158015612094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b89190612e1c565b60208701516040517f5578dfd7000000000000000000000000000000000000000000000000000000008152600481018a9052602481019190915273ffffffffffffffffffffffffffffffffffffffff8a811660448301529190911690635578dfd79060640160206040518083038186803b15801561213557600080fd5b505afa158015612149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216d9190612f54565b612177919061373e565b6040517f5dd8f6aa0000000000000000000000000000000000000000000000000000000081526004810188905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561220357600080fd5b505afa158015612217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223b9190612e1c565b60208701516040517f4e9d00d2000000000000000000000000000000000000000000000000000000008152600481018a9052602481019190915273ffffffffffffffffffffffffffffffffffffffff8a811660448301529190911690634e9d00d29060640160206040518083038186803b1580156122b857600080fd5b505afa1580156122cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f09190612f54565b905081158015906123015750848114155b1561239a57612397826123166012600a61363b565b6040517fa4d0caf20000000000000000000000000000000000000000000000000000000081526004810185905260248101899052601260448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf2906064016108cf565b91505b8183116123a85760006123b2565b6123b2828461373e565b93505050505b949350505050565b60006018826101000151901c61ffff16612710611d14919061373e565b60006028826101000151901c61ffff16612710611d14919061373e565b610100840151600090819060411c6001908116146124225761241d878585612810565b61242e565b61242e88888886611f90565b90508061243f576000915050612806565b6040517f75b0d9cd000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906375b0d9cd9060240160206040518083038186803b1580156124c857600080fd5b505afa1580156124dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125009190612f54565b6040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018a905290915060009073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635dd8f6aa9060240160206040518083038186803b15801561258c57600080fd5b505afa1580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c49190612e1c565b73ffffffffffffffffffffffffffffffffffffffff1663f033b3b48a6125f68b610100015161ffff60089190911c1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252602482015260440160206040518083038186803b15801561264a57600080fd5b505afa15801561265e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126829190612f54565b90508015612697576126948183613587565b91505b818714156126aa57829350505050612806565b600060016040517fc55f571c000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063c55f571c9060240160206040518083038186803b15801561273457600080fd5b505afa158015612748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276c9190612e9a565b600281111561277d5761277d61381c565b146127905761278b896123c0565b612799565b612799896123dd565b9050806127ad576000945050505050612806565b60006127ba858a86611e87565b90506127108214156127d25794506128069350505050565b6127fe816127ec8b6127e68661271061373e565b88611e87565b6127f69085613587565b612710611e87565b955050505050505b9695505050505050565b6040517fd175415300000000000000000000000000000000000000000000000000000000815260048101849052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d17541539060240160006040518083038186803b15801561289b57600080fd5b505afa1580156128af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526128f59190810190612d63565b90506000805b82518110156129c6578281815181106129165761291661384b565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a32e1e96886040518263ffffffff1660e01b815260040161295891815260200190565b60206040518083038186803b15801561297057600080fd5b505afa158015612984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a89190612f54565b6129b29083613587565b9150806129be81613785565b9150506128fb565b50600060018514612a67576040517fa4d0caf2000000000000000000000000000000000000000000000000000000008152600160048201526024810186905260126044820152612a62908390670de0b6b3a76400009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a4d0caf2906064016108cf565b612a69565b815b905085601214612a8457612a7f81601288612a91565b612a86565b805b979650505050505050565b600082821415612aa25750826115ef565b82821115612ad057612ab4838361373e565b612abf90600a61363b565b612ac99085613701565b90506115ef565b612ada828461373e565b612ae590600a61363b565b612ac9908561359f565b8035612afa816138a9565b919050565b600082601f830112612b1057600080fd5b8135612b23612b1e82613541565b6134f2565b818152846020838601011115612b3857600080fd5b816020850160208301376000918101602001919091529392505050565b8051612afa816138a9565b600082601f830112612b7157600080fd5b8151612b7f612b1e82613541565b818152846020838601011115612b9457600080fd5b6123b8826020830160208701613755565b6000806000806000806000878903610140811215612bc257600080fd5b8835612bcd816138a9565b975060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215612bff57600080fd5b50612c086134a5565b6020890135612c16816138a9565b808252506040890135602082015260608901356040820152608089013560608201528096505060a08801359450612c4f60c08901612aef565b935060e0880135925061010088013567ffffffffffffffff80821115612c7457600080fd5b612c808b838c01612aff565b93506101208a0135915080821115612c9757600080fd5b50612ca48a828b01612aff565b91505092959891949750929550565b600080600080600080600080610100898b031215612cd057600080fd5b8835612cdb816138a9565b97506020890135965060408901359550606089013594506080890135935060a0890135612d07816138a9565b925060c089013567ffffffffffffffff80821115612d2457600080fd5b612d308c838d01612aff565b935060e08b0135915080821115612d4657600080fd5b50612d538b828c01612aff565b9150509295985092959890939650565b60006020808385031215612d7657600080fd5b825167ffffffffffffffff80821115612d8e57600080fd5b818501915085601f830112612da257600080fd5b815181811115612db457612db461387a565b8060051b9150612dc58483016134f2565b8181528481019084860184860187018a1015612de057600080fd5b600095505b83861015612e0f5780519450612dfa856138a9565b84835260019590950194918601918601612de5565b5098975050505050505050565b600060208284031215612e2e57600080fd5b81516115ef816138a9565b60008060408385031215612e4c57600080fd5b8235612e57816138a9565b946020939093013593505050565b600080600060608486031215612e7a57600080fd5b8335612e85816138a9565b95602085013595506040909401359392505050565b600060208284031215612eac57600080fd5b8151600381106115ef57600080fd5b60006101208284031215612ece57600080fd5b612ed66134ce565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c0820152612f2260e08401612b55565b60e0820152610100928301519281019290925250919050565b600060208284031215612f4d57600080fd5b5035919050565b600060208284031215612f6657600080fd5b5051919050565b600080600060608486031215612f8257600080fd5b83519250602084015167ffffffffffffffff811115612fa057600080fd5b612fac86828701612b60565b9250506040840151612fbd816138a9565b809150509250925092565b60008060408385031215612fdb57600080fd5b50508035926020909101359150565b600080600060608486031215612fff57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561302c57600080fd5b5050823594602084013594506040840135936060013592509050565b60008151808452613060816020860160208601613755565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6101208101611d148284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b61014081016131868285805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b826101208301529392505050565b600061018061320e8388805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e08301526101008082015181840152505050565b8561012084015273ffffffffffffffffffffffffffffffffffffffff851661014084015280610160840152612a8681840185613048565b6020815261326c60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151613295604084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060408301516132df606084018273ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301525050565b50606083015160e08301526080830151610100818185015260a085015161012085015260c0850151915061332c61014085018373ffffffffffffffffffffffffffffffffffffffff169052565b60e085015191506101808061016086015261334b6101a0860184613048565b92508186015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08584030181860152506133878282613048565b95945050505050565b602081526133b760208201835173ffffffffffffffffffffffffffffffffffffffff169052565b600060208301516133e0604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012061344b8185018373ffffffffffffffffffffffffffffffffffffffff169052565b80850151915050610160610140818186015261346b610180860184613048565b908601518582037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001838701529092506128068382613048565b6040516080810167ffffffffffffffff811182821017156134c8576134c861387a565b60405290565b604051610120810167ffffffffffffffff811182821017156134c8576134c861387a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135395761353961387a565b604052919050565b600067ffffffffffffffff82111561355b5761355b61387a565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000821982111561359a5761359a6137be565b500190565b6000826135d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561363357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613619576136196137be565b8085161561362657918102915b93841c93908002906135df565b509250929050565b60006115ef838360008261365157506001611d14565b8161365e57506000611d14565b8160018114613674576002811461367e5761369a565b6001915050611d14565b60ff84111561368f5761368f6137be565b50506001821b611d14565b5060208310610133831016604e8410600b84101617156136bd575081810a611d14565b6136c783836135da565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156136f9576136f96137be565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613739576137396137be565b500290565b600082821015613750576137506137be565b500390565b60005b83811015613770578181015183820152602001613758565b8381111561377f576000848401525b50505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137b7576137b76137be565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138cb57600080fd5b5056fea264697066735822122099d9435fe69a6753ab83a57565f17ab8f160f492cd29a3cf380c80142011cf8364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_directory": "A contract storing directories of terminals and controllers for each project.",
          "_fundingCycleStore": "A contract storing all funding cycle configurations.",
          "_prices": "A contract that exposes price feeds.",
          "_projects": "A contract which mints ERC-721's that represent project ownership and transfers.",
          "_tokenStore": "A contract that manages token minting and burning."
        }
      },
      "currentOverflowOf(address,uint256)": {
        "details": "The current overflow is represented as a fixed point number with 18 decimals.",
        "params": {
          "_projectId": "The ID of the project to get overflow for.",
          "_terminal": "The terminal for which the overflow is being calculated."
        },
        "returns": {
          "_0": "The current amount of overflow that project has in this terminal."
        }
      },
      "currentTotalOverflowOf(uint256,uint256,uint256)": {
        "details": "The current total overflow is represented as a fixed point number with 18 decimals.",
        "params": {
          "_currency": "The currency that the total overflow should be in terms of.",
          "_decimals": "The number of decimals that the fixed point overflow should include.",
          "_projectId": "The ID of the project to get total overflow for."
        },
        "returns": {
          "_0": "The current total amount of overflow that project has across all terminals."
        }
      },
      "reclaimableOverflowOf(address,uint256,uint256)": {
        "details": " If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.The reclaimable overflow is represented as a fixed point number with 18 decimals.",
        "params": {
          "_projectId": "The ID of the project to get a reclaimable amount for.",
          "_terminal": "The terminal from which the overflow is being calculated.",
          "_tokenCount": "The number of tokens to make the calculation with, as a fixed point number with 18 decimals."
        },
        "returns": {
          "_0": "The amount of overflowed tokens that can be reclaimed."
        }
      },
      "recordAddedBalanceFor(uint256,uint256)": {
        "details": "The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.",
        "params": {
          "_amount": "The amount of temrinal tokens added, as a fixed point number with 18 decimals.",
          "_projectId": "The ID of the project to which the funds being added belong."
        },
        "returns": {
          "fundingCycle": "The current funding cycle for the project."
        }
      },
      "recordDistributionFor(uint256,uint256,uint256,uint256)": {
        "details": "The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.",
        "params": {
          "_amount": "The amount to use from the distribution limit, as a fixed point number. i",
          "_balanceCurrency": "The currency that the balance is expected to be in terms of.",
          "_currency": "The currency of the `_amount`.",
          "_projectId": "The ID of the project that is having funds distributed."
        },
        "returns": {
          "distributedAmount": "The amount of terminal tokens distributed.",
          "fundingCycle": "The funding cycle during which the distribution was made."
        }
      },
      "recordMigration(uint256)": {
        "details": "The msg.sender must be an IJBPaymentTerminal. The amount returned is in terms of the msg.senders tokens.",
        "params": {
          "_projectId": "The ID of the project being migrated."
        },
        "returns": {
          "balance": "The project's current terminal token balance, as a fixed point number with 18 decimals."
        }
      },
      "recordPaymentFrom(address,(address,uint256,uint256,uint256),uint256,address,uint256,string,bytes)": {
        "details": "Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.",
        "params": {
          "_amount": "The amount of tokens being paid, as a fixed point number. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.",
          "_baseWeightCurrency": "The currency to base token issuance on.",
          "_beneficiary": "The address that should receive benefits from the payment.",
          "_memo": "A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.",
          "_metadata": "Bytes to send along to the data source, if one is provided.",
          "_payer": "The original address that sent the payment to the terminal.",
          "_projectId": "The ID of the project being paid."
        },
        "returns": {
          "delegate": "A delegate contract to use for subsequent calls.",
          "fundingCycle": "The project's funding cycle during which payment was made.",
          "memo": "A memo that should be passed along to the emitted event.",
          "tokenCount": "The number of project tokens that were minted, as a fixed point number with 18 decimals."
        }
      },
      "recordRedemptionFor(address,uint256,uint256,uint256,uint256,address,string,bytes)": {
        "details": "The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.",
        "params": {
          "_balanceCurrency": "The currency that the stored balance is expected to be in terms of.",
          "_balanceDecimals": "The amount of decimals expected in the returned `reclaimAmount`.",
          "_beneficiary": "The address that will benefit from the claimed amount.",
          "_holder": "The account that is having its tokens redeemed.",
          "_memo": "A memo to pass along to the emitted event.",
          "_metadata": "Bytes to send along to the data source, if one is provided.",
          "_projectId": "The ID of the project to which the tokens being redeemed belong.",
          "_tokenCount": "The number of project tokens to redeem, as a fixed point number with 18 decimals."
        },
        "returns": {
          "delegate": "A delegate contract to use for subsequent calls.",
          "fundingCycle": "The funding cycle during which the redemption was made.",
          "memo": "A memo that should be passed along to the emitted event.",
          "reclaimAmount": "The amount of terminal tokens reclaimed, as a fixed point number with 18 decimals."
        }
      },
      "recordUsedAllowanceOf(uint256,uint256,uint256,uint256)": {
        "details": "The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.",
        "params": {
          "_amount": "The amount to use from the allowance, as a fixed point number. ",
          "_balanceCurrency": "The currency that the balance is expected to be in terms of.",
          "_currency": "The currency of the `_amount`.",
          "_projectId": "The ID of the project to use the allowance of."
        },
        "returns": {
          "fundingCycle": "The funding cycle during which the withdrawal is being made.",
          "withdrawnAmount": "The amount terminal tokens used, as a fixed point number with 18 decimals."
        }
      }
    },
    "stateVariables": {
      "balanceOf": {
        "details": "The balance is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the balance applies. _projectId The ID of the project to get the balance of."
      },
      "usedDistributionLimitOf": {
        "details": "Increases as projects use their distribution limit.The used distribution limit is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the used distribution limit applies. _projectId The ID of the project to get the used distribution limit of. _fundingCycleNumber The number representing the funding cycle."
      },
      "usedOverflowAllowanceOf": {
        "details": "Increases as projects use their allowance.The used allowance is represented as a fixed point number with 18 decimals. _terminalOf The terminal to which the overflow allowance applies. _projectId The ID of the project to get the used overflow allowance of. _configuration The configuration of the during which the allowance applies."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "The amount of tokens that each project has for each terminal, in terms of the terminal's token."
      },
      "currentOverflowOf(address,uint256)": {
        "notice": "Gets the current overflowed amount in a terminal for a specified project."
      },
      "currentTotalOverflowOf(uint256,uint256,uint256)": {
        "notice": "Gets the current overflowed amount for a specified project across all terminals."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "fundingCycleStore()": {
        "notice": "The contract storing all funding cycle configurations."
      },
      "prices()": {
        "notice": "The contract that exposes price feeds."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "reclaimableOverflowOf(address,uint256,uint256)": {
        "notice": "The amount of overflowed tokens that can be reclaimed by the specified number of tokens."
      },
      "recordAddedBalanceFor(uint256,uint256)": {
        "notice": "Records newly added funds for the project."
      },
      "recordDistributionFor(uint256,uint256,uint256,uint256)": {
        "notice": "Records newly distributed funds for a project."
      },
      "recordMigration(uint256)": {
        "notice": "Records the migration of funds from this store."
      },
      "recordPaymentFrom(address,(address,uint256,uint256,uint256),uint256,address,uint256,string,bytes)": {
        "notice": "Records newly contributed tokens to a project."
      },
      "recordRedemptionFor(address,uint256,uint256,uint256,uint256,address,string,bytes)": {
        "notice": "Records newly redeemed tokens of a project."
      },
      "recordUsedAllowanceOf(uint256,uint256,uint256,uint256)": {
        "notice": "Records newly used allowance funds of a project."
      },
      "tokenStore()": {
        "notice": "The contract that manages token minting and burning."
      },
      "usedDistributionLimitOf(address,uint256,uint256)": {
        "notice": "The amount of tokens that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the terminal's token."
      },
      "usedOverflowAllowanceOf(address,uint256,uint256)": {
        "notice": "The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the terminal's token."
      }
    },
    "notice": "This contract manages all bookkeeping for inflows and outflows of a particular token for any IJBPaymentTerminal msg.sender.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8579,
        "contract": "contracts/JBPaymentTerminalStore.sol:JBPaymentTerminalStore",
        "label": "balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IJBPaymentTerminal)14672,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 8589,
        "contract": "contracts/JBPaymentTerminalStore.sol:JBPaymentTerminalStore",
        "label": "usedOverflowAllowanceOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IJBPaymentTerminal)14672,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 8599,
        "contract": "contracts/JBPaymentTerminalStore.sol:JBPaymentTerminalStore",
        "label": "usedDistributionLimitOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IJBPaymentTerminal)14672,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      }
    ],
    "types": {
      "t_contract(IJBPaymentTerminal)14672": {
        "encoding": "inplace",
        "label": "contract IJBPaymentTerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IJBPaymentTerminal)14672,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_contract(IJBPaymentTerminal)14672",
        "label": "mapping(contract IJBPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_contract(IJBPaymentTerminal)14672,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IJBPaymentTerminal)14672",
        "label": "mapping(contract IJBPaymentTerminal => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}