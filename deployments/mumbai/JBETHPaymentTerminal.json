{
  "address": "0x34a87E22a82aaC8bd479E7D7D422a3Bd0CA69F9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseWeightCurrency",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBOperatorStore",
          "name": "_operatorStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBProjects",
          "name": "_projects",
          "type": "address"
        },
        {
          "internalType": "contract IJBDirectory",
          "name": "_directory",
          "type": "address"
        },
        {
          "internalType": "contract IJBSplitsStore",
          "name": "_splitsStore",
          "type": "address"
        },
        {
          "internalType": "contract IJBPrices",
          "name": "_prices",
          "type": "address"
        },
        {
          "internalType": "contract JBPaymentTerminalStore",
          "name": "_store",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FEE_TOO_HIGH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INADEQUATE_DISTRIBUTION_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INADEQUATE_RECLAIM_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INADEQUATE_TOKEN_COUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NO_MSG_VALUE_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PAY_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PROJECT_TERMINAL_MISMATCH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REDEEM_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TERMINAL_IN_SPLIT_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TERMINAL_TOKENS_INCOMPATIBLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AddToBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IJBPayDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currency",
                  "type": "uint256"
                }
              ],
              "internalType": "struct JBTokenAmount",
              "name": "amount",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "projectTokenCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct JBDidPayData",
          "name": "data",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DelegateDidPay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IJBRedemptionDelegate",
          "name": "delegate",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "holder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectTokenCount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "currency",
                  "type": "uint256"
                }
              ],
              "internalType": "struct JBTokenAmount",
              "name": "reclaimedAmount",
              "type": "tuple"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "memo",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct JBDidRedeemData",
          "name": "data",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DelegateDidRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryDistributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributePayouts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "preferClaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "percent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lockedUntil",
              "type": "uint256"
            },
            {
              "internalType": "contract IJBSplitAllocator",
              "name": "allocator",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBSplit",
          "name": "split",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "DistributeToPayoutSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IJBPaymentTerminal",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Migrate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "beneficiaryTokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Pay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "fee",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct JBFee[]",
          "name": "fees",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ProcessFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IJBFeeGauge",
          "name": "feeGauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFeeGauge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IJBPaymentTerminal",
          "name": "terminal",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SetFeelessTerminal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleConfiguration",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingCycleNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "memo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "UseAllowance",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "addToBalanceOf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseWeightCurrency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "currentEthOverflowOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "directory",
      "outputs": [
        {
          "internalType": "contract IJBDirectory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "distributePayoutsOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeGauge",
      "outputs": [
        {
          "internalType": "contract IJBFeeGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "heldFeesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "fee",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct JBFee[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFeelessTerminal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorStore",
      "outputs": [
        {
          "internalType": "contract IJBOperatorStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferClaimedTokens",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutSplitsGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prices",
      "outputs": [
        {
          "internalType": "contract IJBPrices",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        }
      ],
      "name": "processFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projects",
      "outputs": [
        {
          "internalType": "contract IJBProjects",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        }
      ],
      "name": "redeemTokensOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reclaimAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBFeeGauge",
          "name": "_feeGauge",
          "type": "address"
        }
      ],
      "name": "setFeeGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitsStore",
      "outputs": [
        {
          "internalType": "contract IJBSplitsStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "store",
      "outputs": [
        {
          "internalType": "contract JBPaymentTerminalStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IJBPaymentTerminal",
          "name": "_terminal",
          "type": "address"
        }
      ],
      "name": "toggleFeelessTerminal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnedTokens",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_memo",
          "type": "string"
        }
      ],
      "name": "useAllowanceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea80a74788f9452432ee3ece43910194edb82088c6c14de9fbff6248fa3846c6",
  "receipt": {
    "to": null,
    "from": "0x5E5C527003B3fE8f5512bC78545e182e0405Ba78",
    "contractAddress": "0x34a87E22a82aaC8bd479E7D7D422a3Bd0CA69F9b",
    "transactionIndex": 2,
    "gasUsed": "5151210",
    "logsBloom": "0x
    "blockHash": "0x7a75317e9b930de9d86c436edc0ff4b77416d4f317f443f83b783e9e8847060e",
    "transactionHash": "0xea80a74788f9452432ee3ece43910194edb82088c6c14de9fbff6248fa3846c6",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 25633173,
        "transactionHash": "0xea80a74788f9452432ee3ece43910194edb82088c6c14de9fbff6248fa3846c6",
        "address": "0x34a87E22a82aaC8bd479E7D7D422a3Bd0CA69F9b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e5c527003b3fe8f5512bc78545e182e0405ba78"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x7a75317e9b930de9d86c436edc0ff4b77416d4f317f443f83b783e9e8847060e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 25633173,
        "transactionHash": "0xea80a74788f9452432ee3ece43910194edb82088c6c14de9fbff6248fa3846c6",
        "address": "0x34a87E22a82aaC8bd479E7D7D422a3Bd0CA69F9b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000005e5c527003b3fe8f5512bc78545e182e0405ba78",
          "0x0000000000000000000000005e5c527003b3fe8f5512bc78545e182e0405ba78"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x7a75317e9b930de9d86c436edc0ff4b77416d4f317f443f83b783e9e8847060e"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 25633173,
        "transactionHash": "0xea80a74788f9452432ee3ece43910194edb82088c6c14de9fbff6248fa3846c6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005e5c527003b3fe8f5512bc78545e182e0405ba78",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002b05e3f64b049f6000000000000000000000000000000000000000000000000084d67d9fd48ab10000000000000000000000000000000000000000000000c039e426974112f8ab7000000000000000000000000000000000000000000000000059d099a9898611a000000000000000000000000000000000000000000000c03a0f2c7b375dfd4ad",
        "logIndex": 110,
        "blockHash": "0x7a75317e9b930de9d86c436edc0ff4b77416d4f317f443f83b783e9e8847060e"
      }
    ],
    "blockNumber": 25633173,
    "cumulativeGasUsed": "6387747",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0x523D4f4EE2Dd194e5C3aEA3bd82c267b50379521",
    "0x9f6B993D2b05088317d123E6B56Dd4444E7F016A",
    "0xf8beb62B8ae1cE8053D5A3B6d66C4f1a8ef36F4a",
    "0xC41BCD246c889A642eA27CF1F47F3948b6E5C9dB",
    "0x2d45E2691dD969C2C84E91D8F163a001CC9624E4",
    "0x346ae80CE75BEe1B690F2949D1137F6664D1aCa3",
    "0x5E5C527003B3fE8f5512bC78545e182e0405Ba78"
  ],
  "numDeployments": 1,
  "solcInputHash": "0136ddce72e9b07c45f37ebabcbc8b52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseWeightCurrency\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IJBDirectory\",\"name\":\"_directory\",\"type\":\"address\"},{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"_splitsStore\",\"type\":\"address\"},{\"internalType\":\"contract IJBPrices\",\"name\":\"_prices\",\"type\":\"address\"},{\"internalType\":\"contract JBPaymentTerminalStore\",\"name\":\"_store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_TOO_HIGH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INADEQUATE_DISTRIBUTION_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INADEQUATE_RECLAIM_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INADEQUATE_TOKEN_COUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NO_MSG_VALUE_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PAY_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PROJECT_TERMINAL_MISMATCH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REDEEM_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TERMINAL_IN_SPLIT_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TERMINAL_TOKENS_INCOMPATIBLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AddToBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IJBPayDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBTokenAmount\",\"name\":\"amount\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct JBDidPayData\",\"name\":\"data\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DelegateDidPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IJBRedemptionDelegate\",\"name\":\"delegate\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currency\",\"type\":\"uint256\"}],\"internalType\":\"struct JBTokenAmount\",\"name\":\"reclaimedAmount\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct JBDidRedeemData\",\"name\":\"data\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DelegateDidRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryDistributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributePayouts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBSplitAllocator\",\"name\":\"allocator\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBSplit\",\"name\":\"split\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"DistributeToPayoutSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beneficiaryTokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"fee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct JBFee[]\",\"name\":\"fees\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProcessFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RedeemTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IJBFeeGauge\",\"name\":\"feeGauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFeeGauge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"terminal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetFeelessTerminal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleConfiguration\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingCycleNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"UseAllowance\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"addToBalanceOf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseWeightCurrency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"currentEthOverflowOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directory\",\"outputs\":[{\"internalType\":\"contract IJBDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"distributePayoutsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeGauge\",\"outputs\":[{\"internalType\":\"contract IJBFeeGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"heldFeesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"fee\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct JBFee[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeelessTerminal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IJBOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferClaimedTokens\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutSplitsGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"contract IJBPrices\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"}],\"name\":\"processFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IJBProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"redeemTokensOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reclaimAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBFeeGauge\",\"name\":\"_feeGauge\",\"type\":\"address\"}],\"name\":\"setFeeGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitsStore\",\"outputs\":[{\"internalType\":\"contract IJBSplitsStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract JBPaymentTerminalStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IJBPaymentTerminal\",\"name\":\"_terminal\",\"type\":\"address\"}],\"name\":\"toggleFeelessTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnedTokens\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_memo\",\"type\":\"string\"}],\"name\":\"useAllowanceOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToBalanceOf(uint256,uint256,string)\":{\"params\":{\"_amount\":\"The amount of tokens to add, as a fixed point number with 18 decimals. If this is an ETH terminal, this is ignored and msg.value is used instead.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_projectId\":\"The ID of the project to which the funds received belong.\"}},\"currentEthOverflowOf(uint256)\":{\"details\":\"The current overflow is represented as a fixed point number with 18 decimals.\",\"params\":{\"_projectId\":\"The ID of the project to get overflow for.\"},\"returns\":{\"_0\":\"The current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals.\"}},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"details\":\"Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner.Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function.\",\"params\":{\"_amount\":\"The amount of terminal tokens to distribute, as a fixed point number with 18 decimals.\",\"_currency\":\"The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_minReturnedTokens\":\"The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\",\"_projectId\":\"The ID of the project having its payouts distributed.\"}},\"heldFeesOf(uint256)\":{\"params\":{\"_projectId\":\"The ID of the project for which fees are being held.\"},\"returns\":{\"_0\":\"An array of fees that are being held.\"}},\"migrate(uint256,address)\":{\"details\":\"Only a project's owner or a designated operator can migrate it.\",\"params\":{\"_projectId\":\"The ID of the project being migrated.\",\"_to\":\"The terminal contract that will gain the project's funds.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pay(uint256,uint256,address,uint256,bool,string,bytes)\":{\"params\":{\"_amount\":\"The amount of terminal tokens being received, as a fixed point number with 18 decimals. If this terminal's token is ETH, this is ignored and msg.value is used in its place.\",\"_beneficiary\":\"The address to mint tokens for and pass along to the funding cycle's data source and delegate.\",\"_memo\":\"A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\",\"_metadata\":\"Bytes to send along to the data source and delegate, if provided.\",\"_minReturnedTokens\":\"The minimum number of project tokens expected in return, as a fixed point\",\"_preferClaimedTokens\":\"A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\",\"_projectId\":\"The ID of the project being paid.\"}},\"processFees(uint256)\":{\"details\":\"Only a project owner, an operator, or the contract's owner can process held fees.\",\"params\":{\"_projectId\":\"The ID of the project whos held fees should be processed.\"}},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"details\":\"Only a token's holder or a designated operator can redeem it.\",\"params\":{\"_beneficiary\":\"The address to send the terminal tokens to.\",\"_holder\":\"The account to redeem tokens for.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_metadata\":\"Bytes to send along to the data source and delegate, if provided.\",\"_minReturnedTokens\":\"The minimum amount of terminal tokens expected in return, as a fixed point number with 18 decimals.\",\"_projectId\":\"The ID of the project to which the tokens being redeemed belong.\",\"_tokenCount\":\"The number of project tokens to redeem, as a fixed point number with 18 decimals.\"},\"returns\":{\"reclaimAmount\":\"The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFee(uint256)\":{\"details\":\"Only the owner of this contract can change the fee.\",\"params\":{\"_fee\":\"The new fee, out of MAX_FEE.\"}},\"setFeeGauge(address)\":{\"details\":\"Only the owner of this contract can change the fee gauge.\",\"params\":{\"_feeGauge\":\"The new fee gauge.\"}},\"toggleFeelessTerminal(address)\":{\"details\":\"Only the owner of this contract can change the fee.\",\"params\":{\"_terminal\":\"The terminal that can be paid towards while still bypassing fees.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address,string)\":{\"details\":\"Only a project's owner or a designated operator can use its allowance.\",\"params\":{\"_amount\":\"The amount of terminal tokens to use from this project's current allowance, as a fixed point number with 18 decimals.\",\"_beneficiary\":\"The address to send the funds to.\",\"_currency\":\"The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.\",\"_memo\":\"A memo to pass along to the emitted event.\",\"_minReturnedTokens\":\"The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\",\"_projectId\":\"The ID of the project to use the allowance of.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"addToBalanceOf(uint256,uint256,string)\":{\"notice\":\"Receives funds belonging to the specified project.\"},\"baseWeightCurrency()\":{\"notice\":\"The currency to base token issuance on.\"},\"currency()\":{\"notice\":\"The currency to use when resolving price feeds for this terminal.\"},\"currentEthOverflowOf(uint256)\":{\"notice\":\"Gets the current overflowed amount in this for a specified project, in terms of ETH.\"},\"decimals()\":{\"notice\":\"The number of decimals the token fixed point amounts are expected to have.\"},\"directory()\":{\"notice\":\"The directory of terminals and controllers for projects.\"},\"distributePayoutsOf(uint256,uint256,uint256,uint256,string)\":{\"notice\":\"Distributes payouts for a project according to the constraints of its current funding cycle.\"},\"fee()\":{\"notice\":\"The platform fee percent.\"},\"feeGauge()\":{\"notice\":\"The data source that returns a discount to apply to a project's fee.\"},\"heldFeesOf(uint256)\":{\"notice\":\"The fees that are currently being held to be processed later for each project.\"},\"isFeelessTerminal(address)\":{\"notice\":\"Terminals that can be paid towards from this terminal without incurring a fee. _terminal The terminal that can be paid toward.\"},\"migrate(uint256,address)\":{\"notice\":\"Allows a project owner to migrate its funds and operations to a new terminal of the same token type.\"},\"operatorStore()\":{\"notice\":\" A contract storing operator assignments.\"},\"pay(uint256,uint256,address,uint256,bool,string,bytes)\":{\"notice\":\"Contribute ETH to a project.\"},\"payoutSplitsGroup()\":{\"notice\":\"The group that payout splits coming from this terminal are identified by.\"},\"prices()\":{\"notice\":\"The contract that exposes price feeds.\"},\"processFees(uint256)\":{\"notice\":\"Process any fees that are being held for the project.\"},\"projects()\":{\"notice\":\"The Projects contract which mints ERC-721's that represent project ownership and transfers.\"},\"redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)\":{\"notice\":\"Addresses can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source.\"},\"setFee(uint256)\":{\"notice\":\"Allows the fee to be updated.\"},\"setFeeGauge(address)\":{\"notice\":\"Allows the fee gauge to be updated.\"},\"splitsStore()\":{\"notice\":\"The contract that stores splits for each project.\"},\"store()\":{\"notice\":\"The contract that stores and manages the terminal's data.\"},\"toggleFeelessTerminal(address)\":{\"notice\":\"Toggles whether projects operating on this terminal can pay projects operating on other terminals without incurring a fee.\"},\"token()\":{\"notice\":\"The token that this terminal accepts.\"},\"useAllowanceOf(uint256,uint256,uint256,uint256,address,string)\":{\"notice\":\"Allows a project to send funds from its overflow up to the preconfigured allowance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JBETHPaymentTerminal.sol\":\"JBETHPaymentTerminal\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0-rc.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3777e696b62134e6177440dbe6e6601c0c156a443f57167194b67e75527439de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@paulrberg/contracts/math/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"prb-math/contracts/PRBMath.sol\\\";\\n\",\"keccak256\":\"0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495\",\"license\":\"Unlicense\"},\"contracts/JBETHPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable comprehensive-interface*/\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\n// Inheritance\\nimport './abstract/JBPayoutRedemptionPaymentTerminal.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\n\\ncontract JBETHPaymentTerminal is JBPayoutRedemptionPaymentTerminal {\\n  constructor(\\n    uint256 _baseWeightCurrency,\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBSplitsStore _splitsStore,\\n    IJBPrices _prices,\\n    JBPaymentTerminalStore _store,\\n    address _owner\\n  )\\n    JBPayoutRedemptionPaymentTerminal(\\n      JBTokens.ETH,\\n      18, // 18 decimals.\\n      JBCurrencies.ETH,\\n      _baseWeightCurrency,\\n      JBSplitsGroups.ETH_PAYOUT,\\n      _operatorStore,\\n      _projects,\\n      _directory,\\n      _splitsStore,\\n      _prices,\\n      _store,\\n      _owner\\n    )\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  function _transferFrom(\\n    address,\\n    address payable _to,\\n    uint256 _amount\\n  ) internal override {\\n    Address.sendValue(_to, _amount);\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  function _beforeTransferTo(address _to, uint256 _amount) internal override {}\\n}\\n\",\"keccak256\":\"0x5fffea4873613b0af3d51a373bc89ba3ba9e03ff7398451ba4d090b272a039e4\",\"license\":\"MIT\"},\"contracts/JBPaymentTerminalStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* solhint-disable comprehensive-interface*/\\npragma solidity 0.8.6;\\n\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './interfaces/IJBPrices.sol';\\nimport './interfaces/IJBTokenStore.sol';\\nimport './interfaces/IJBPaymentTerminal.sol';\\n\\nimport './libraries/JBConstants.sol';\\nimport './libraries/JBCurrencies.sol';\\nimport './libraries/JBOperations.sol';\\nimport './libraries/JBSplitsGroups.sol';\\nimport './libraries/JBFundingCycleMetadataResolver.sol';\\nimport './libraries/JBFixedPointNumber.sol';\\n\\nimport './structs/JBTokenAmount.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror CURRENCY_MISMATCH();\\nerror DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\nerror FUNDING_CYCLE_PAYMENT_PAUSED();\\nerror FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\nerror FUNDING_CYCLE_REDEEM_PAUSED();\\nerror INADEQUATE_CONTROLLER_ALLOWANCE();\\nerror INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\nerror INSUFFICIENT_TOKENS();\\nerror INVALID_FUNDING_CYCLE();\\nerror PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\nerror PAYMENT_TERMINAL_UNAUTHORIZED();\\nerror STORE_ALREADY_CLAIMED();\\n\\n/**\\n  @notice\\n  This contract manages all bookkeeping for inflows and outflows of a particular token for any IJBPaymentTerminal msg.sender.\\n*/\\ncontract JBPaymentTerminalStore {\\n  // A library that parses the packed funding cycle metadata into a friendlier format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A library that provides utility for fixed point numbers.\\n  using JBFixedPointNumber for uint256;\\n\\n  /**\\n    @notice\\n    Ensures up to 18 decimal points of persisted fidelity on mulDiv operations of fixed point numbers. \\n  */\\n  uint256 private constant _FIXED_POINT_MAX_FIDELITY = 18;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable projects;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable directory;\\n\\n  /**\\n    @notice\\n    The contract storing all funding cycle configurations.\\n  */\\n  IJBFundingCycleStore public immutable fundingCycleStore;\\n\\n  /**\\n    @notice\\n    The contract that manages token minting and burning.\\n  */\\n  IJBTokenStore public immutable tokenStore;\\n\\n  /**\\n    @notice\\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The amount of tokens that each project has for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    The balance is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the balance applies.\\n    _projectId The ID of the project to get the balance of.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => uint256)) public balanceOf;\\n\\n  /**\\n    @notice\\n    The amount of overflow (in the terminal's currency) that a project has used from its allowance during the current funding cycle configuration for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    Increases as projects use their allowance.\\n\\n    @dev\\n    The used allowance is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the overflow allowance applies.\\n    _projectId The ID of the project to get the used overflow allowance of.\\n    _configuration The configuration of the during which the allowance applies.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\\n    public usedOverflowAllowanceOf;\\n\\n  /**\\n    @notice\\n    The amount of tokens that a project has distributed from its limit during the current funding cycle for each terminal, in terms of the terminal's token.\\n\\n    @dev\\n    Increases as projects use their distribution limit.\\n\\n    @dev\\n    The used distribution limit is represented as a fixed point number with 18 decimals.\\n\\n    _terminalOf The terminal to which the used distribution limit applies.\\n    _projectId The ID of the project to get the used distribution limit of.\\n    _fundingCycleNumber The number representing the funding cycle.\\n  */\\n  mapping(IJBPaymentTerminal => mapping(uint256 => mapping(uint256 => uint256)))\\n    public usedDistributionLimitOf;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount in a terminal for a specified project.\\n\\n    @dev\\n    The current overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _terminal The terminal for which the overflow is being calculated.\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of overflow that project has in this terminal.\\n  */\\n  function currentOverflowOf(IJBPaymentTerminal _terminal, uint256 _projectId)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    return _overflowDuring(_terminal, _projectId, _fundingCycle, _terminal.currency());\\n  }\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount for a specified project across all terminals.\\n\\n    @dev\\n    The current total overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _decimals The number of decimals that the fixed point overflow should include.\\n    @param _currency The currency that the total overflow should be in terms of.\\n\\n    @return The current total amount of overflow that project has across all terminals.\\n  */\\n  function currentTotalOverflowOf(\\n    uint256 _projectId,\\n    uint256 _decimals,\\n    uint256 _currency\\n  ) external view returns (uint256) {\\n    return _currentTotalOverflowOf(_projectId, _decimals, _currency);\\n  }\\n\\n  /**\\n    @notice\\n    The amount of overflowed tokens that can be reclaimed by the specified number of tokens.\\n\\n    @dev \\n    If the project has an active funding cycle reconfiguration ballot, the project's ballot redemption rate is used.\\n\\n    @dev\\n    The reclaimable overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _terminal The terminal from which the overflow is being calculated.\\n    @param _projectId The ID of the project to get a reclaimable amount for.\\n    @param _tokenCount The number of tokens to make the calculation with, as a fixed point number with 18 decimals.\\n\\n    @return The amount of overflowed tokens that can be reclaimed.\\n  */\\n  function reclaimableOverflowOf(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    uint256 _tokenCount\\n  ) external view returns (uint256) {\\n    return\\n      _reclaimableOverflowOf(\\n        _terminal,\\n        _projectId,\\n        fundingCycleStore.currentOf(_projectId),\\n        _tokenCount,\\n        _terminal.decimals(),\\n        _terminal.currency()\\n      );\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _prices A contract that exposes price feeds.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _fundingCycleStore A contract storing all funding cycle configurations.\\n    @param _tokenStore A contract that manages token minting and burning.\\n  */\\n  constructor(\\n    IJBPrices _prices,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBFundingCycleStore _fundingCycleStore,\\n    IJBTokenStore _tokenStore\\n  ) {\\n    prices = _prices;\\n    projects = _projects;\\n    directory = _directory;\\n    fundingCycleStore = _fundingCycleStore;\\n    tokenStore = _tokenStore;\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Records newly contributed tokens to a project.\\n\\n    @dev\\n    Mint's the project's tokens according to values provided by a configured data source. If no data source is configured, mints tokens proportional to the amount of the contribution.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _payer The original address that sent the payment to the terminal.\\n    @param _amount The amount of tokens being paid, as a fixed point number. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n    @param _projectId The ID of the project being paid.\\n    @param _beneficiary The address that should receive benefits from the payment.\\n    @param _baseWeightCurrency The currency to base token issuance on.\\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\\n    @param _metadata Bytes to send along to the data source, if one is provided.\\n\\n    @return fundingCycle The project's funding cycle during which payment was made.\\n    @return tokenCount The number of project tokens that were minted, as a fixed point number with 18 decimals.\\n    @return delegate A delegate contract to use for subsequent calls.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordPaymentFrom(\\n    address _payer,\\n    JBTokenAmount memory _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _baseWeightCurrency,\\n    string memory _memo,\\n    bytes memory _metadata\\n  )\\n    external\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 tokenCount,\\n      IJBPayDelegate delegate,\\n      string memory memo\\n    )\\n  {\\n    // Get a reference to the current funding cycle for the project.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The project must have a funding cycle configured.\\n    if (fundingCycle.number == 0) revert INVALID_FUNDING_CYCLE();\\n\\n    // Must not be paused.\\n    if (fundingCycle.payPaused()) revert FUNDING_CYCLE_PAYMENT_PAUSED();\\n\\n    // The weight according to which new token supply is to be minted, as a fixed point number with 18 decimals.\\n    uint256 _weight;\\n\\n    // If the funding cycle has configured a data source, use it to derive a weight and memo.\\n    if (fundingCycle.useDataSourceForPay()) {\\n      (_weight, memo, delegate) = fundingCycle.dataSource().payParams(\\n        JBPayParamsData(\\n          IJBPaymentTerminal(msg.sender),\\n          _payer,\\n          _amount,\\n          _projectId,\\n          fundingCycle.weight,\\n          fundingCycle.reservedRate(),\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        )\\n      );\\n    }\\n    // Otherwise use the funding cycle's weight\\n    else {\\n      _weight = fundingCycle.weight;\\n      memo = _memo;\\n    }\\n\\n    // If there's no amount being recorded, there's nothing left to do.\\n    if (_amount.value == 0) return (fundingCycle, 0, delegate, memo);\\n\\n    // Add the amount to the token balance of the project if needed.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] +\\n      _amount.value;\\n\\n    // If there's no weight, token count must be 0 so there's nothing left to do.\\n    if (_weight == 0) return (fundingCycle, 0, delegate, memo);\\n\\n    // If the terminal should base its weight on a different currency from the terminal's currency, determine the factor.\\n    // The weight is always a fixed point mumber with 18 decimals. The ratio should be the same.\\n    uint256 _weightRatio = _amount.currency == _baseWeightCurrency\\n      ? 10**_amount.decimals // Use `_amount.decimals` to make sure the resulting `tokenCount` keeps the same decimal fidelity as `weight`.\\n      : prices.priceFor(_amount.currency, _baseWeightCurrency, _amount.decimals);\\n\\n    // Find the number of tokens to mint, as a fixed point number with as many decimals as `weight` has.\\n    tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio);\\n  }\\n\\n  /**\\n    @notice\\n    Records newly distributed funds for a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project that is having funds distributed.\\n    @param _amount The amount to use from the distribution limit, as a fixed point number. i\\n    @param _currency The currency of the `_amount`.\\n    @param _balanceCurrency The currency that the balance is expected to be in terms of.\\n\\n    @return fundingCycle The funding cycle during which the distribution was made.\\n    @return distributedAmount The amount of terminal tokens distributed.\\n  */\\n  function recordDistributionFor(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _balanceCurrency\\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 distributedAmount) {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The funding cycle must not be configured to have distributions paused.\\n    if (fundingCycle.distributionsPaused()) revert FUNDING_CYCLE_DISTRIBUTION_PAUSED();\\n\\n    // The new total amount that has been distributed during this funding cycle.\\n    uint256 _newUsedDistributionLimitOf = usedDistributionLimitOf[IJBPaymentTerminal(msg.sender)][\\n      _projectId\\n    ][fundingCycle.number] + _amount;\\n\\n    // Amount must be within what is still distributable.\\n    uint256 _distributionLimitOf = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      fundingCycle.configuration,\\n      IJBPaymentTerminal(msg.sender)\\n    );\\n\\n    if (_newUsedDistributionLimitOf > _distributionLimitOf || _distributionLimitOf == 0)\\n      revert DISTRIBUTION_AMOUNT_LIMIT_REACHED();\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).distributionLimitCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        IJBPaymentTerminal(msg.sender)\\n      )\\n    ) revert CURRENCY_MISMATCH();\\n\\n    // Convert the amount to the balance's currency.\\n    distributedAmount = (_currency == _balanceCurrency) ? _amount : distributedAmount = PRBMath\\n      .mulDiv(\\n        _amount,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_currency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // The amount being distributed must be available.\\n    if (distributedAmount > balanceOf[IJBPaymentTerminal(msg.sender)][_projectId])\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Store the new amount.\\n    usedDistributionLimitOf[IJBPaymentTerminal(msg.sender)][_projectId][\\n      fundingCycle.number\\n    ] = _newUsedDistributionLimitOf;\\n\\n    // Removed the distributed funds from the project's token balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n      distributedAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly used allowance funds of a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount to use from the allowance, as a fixed point number. \\n    @param _currency The currency of the `_amount`.\\n    @param _balanceCurrency The currency that the balance is expected to be in terms of.\\n\\n    @return fundingCycle The funding cycle during which the withdrawal is being made.\\n    @return withdrawnAmount The amount terminal tokens used, as a fixed point number with 18 decimals.\\n  */\\n  function recordUsedAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _balanceCurrency\\n  ) external returns (JBFundingCycle memory fundingCycle, uint256 withdrawnAmount) {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Get a reference to the new used overflow allowance.\\n    uint256 _newUsedOverflowAllowanceOf = usedOverflowAllowanceOf[IJBPaymentTerminal(msg.sender)][\\n      _projectId\\n    ][fundingCycle.configuration] + _amount;\\n\\n    // There must be sufficient allowance available.\\n    uint256 _allowanceOf = directory.controllerOf(_projectId).overflowAllowanceOf(\\n      _projectId,\\n      fundingCycle.configuration,\\n      IJBPaymentTerminal(msg.sender)\\n    );\\n\\n    if (_newUsedOverflowAllowanceOf > _allowanceOf || _allowanceOf == 0)\\n      revert INADEQUATE_CONTROLLER_ALLOWANCE();\\n\\n    // Make sure the currencies match.\\n    if (\\n      _currency !=\\n      directory.controllerOf(_projectId).overflowAllowanceCurrencyOf(\\n        _projectId,\\n        fundingCycle.configuration,\\n        IJBPaymentTerminal(msg.sender)\\n      )\\n    ) revert CURRENCY_MISMATCH();\\n\\n    // Convert the amount to this store's terminal's token.\\n    withdrawnAmount = (_currency == _balanceCurrency)\\n      ? _amount\\n      : PRBMath.mulDiv(\\n        _amount,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_currency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // The amount being withdrawn must be available in the overflow.\\n    if (\\n      withdrawnAmount >\\n      _overflowDuring(IJBPaymentTerminal(msg.sender), _projectId, fundingCycle, _balanceCurrency)\\n    ) revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Store the incremented value.\\n    usedOverflowAllowanceOf[IJBPaymentTerminal(msg.sender)][_projectId][\\n      fundingCycle.configuration\\n    ] = _newUsedOverflowAllowanceOf;\\n\\n    // Update the project's token balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n      withdrawnAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly redeemed tokens of a project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _holder The account that is having its tokens redeemed.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\\n    @param _balanceDecimals The amount of decimals expected in the returned `reclaimAmount`.\\n    @param _balanceCurrency The currency that the stored balance is expected to be in terms of.\\n    @param _beneficiary The address that will benefit from the claimed amount.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _metadata Bytes to send along to the data source, if one is provided.\\n\\n    @return fundingCycle The funding cycle during which the redemption was made.\\n    @return reclaimAmount The amount of terminal tokens reclaimed, as a fixed point number with 18 decimals.\\n    @return delegate A delegate contract to use for subsequent calls.\\n    @return memo A memo that should be passed along to the emitted event.\\n  */\\n  function recordRedemptionFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _balanceDecimals,\\n    uint256 _balanceCurrency,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _metadata\\n  )\\n    external\\n    returns (\\n      JBFundingCycle memory fundingCycle,\\n      uint256 reclaimAmount,\\n      IJBRedemptionDelegate delegate,\\n      string memory memo\\n    )\\n  {\\n    // The holder must have the specified number of the project's tokens.\\n    if (tokenStore.balanceOf(_holder, _projectId) < _tokenCount) revert INSUFFICIENT_TOKENS();\\n\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // The current funding cycle must not be paused.\\n    if (fundingCycle.redeemPaused()) revert FUNDING_CYCLE_REDEEM_PAUSED();\\n\\n    // If the funding cycle has configured a data source, use it to derive a claim amount and memo.\\n    if (fundingCycle.useDataSourceForRedeem())\\n      (reclaimAmount, memo, delegate) = fundingCycle.dataSource().redeemParams(\\n        JBRedeemParamsData(\\n          IJBPaymentTerminal(msg.sender),\\n          _holder,\\n          _tokenCount,\\n          _balanceDecimals,\\n          _projectId,\\n          fundingCycle.redemptionRate(),\\n          fundingCycle.ballotRedemptionRate(),\\n          _balanceCurrency,\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        )\\n      );\\n    else {\\n      reclaimAmount = _reclaimableOverflowOf(\\n        IJBPaymentTerminal(msg.sender),\\n        _projectId,\\n        fundingCycle,\\n        _tokenCount,\\n        _balanceDecimals,\\n        _balanceCurrency\\n      );\\n      memo = _memo;\\n    }\\n\\n    // The amount being reclaimed must be within the project's balance.\\n    if (reclaimAmount > balanceOf[IJBPaymentTerminal(msg.sender)][_projectId])\\n      revert INADEQUATE_PAYMENT_TERMINAL_STORE_BALANCE();\\n\\n    // Remove the reclaimed funds from the project's balance.\\n    if (reclaimAmount > 0)\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n        balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] -\\n        reclaimAmount;\\n  }\\n\\n  /**\\n    @notice\\n    Records newly added funds for the project.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount specified in the params is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project to which the funds being added belong.\\n    @param _amount The amount of temrinal tokens added, as a fixed point number with 18 decimals.\\n\\n    @return fundingCycle The current funding cycle for the project.\\n  */\\n  function recordAddedBalanceFor(uint256 _projectId, uint256 _amount)\\n    external\\n    returns (JBFundingCycle memory fundingCycle)\\n  {\\n    // Get a reference to the project's current funding cycle.\\n    fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Increment the balance.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] =\\n      balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] +\\n      _amount;\\n  }\\n\\n  /**\\n    @notice\\n    Records the migration of funds from this store.\\n\\n    @dev\\n    The msg.sender must be an IJBPaymentTerminal. The amount returned is in terms of the msg.senders tokens.\\n\\n    @param _projectId The ID of the project being migrated.\\n\\n    @return balance The project's current terminal token balance, as a fixed point number with 18 decimals.\\n  */\\n  function recordMigration(uint256 _projectId) external returns (uint256 balance) {\\n    // Get a reference to the project's current funding cycle.\\n    JBFundingCycle memory _fundingCycle = fundingCycleStore.currentOf(_projectId);\\n\\n    // Migration must be allowed\\n    if (!_fundingCycle.terminalMigrationAllowed()) revert PAYMENT_TERMINAL_MIGRATION_NOT_ALLOWED();\\n\\n    // Return the current balance.\\n    balance = balanceOf[IJBPaymentTerminal(msg.sender)][_projectId];\\n\\n    // Set the balance to 0.\\n    balanceOf[IJBPaymentTerminal(msg.sender)][_projectId] = 0;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    See docs for `reclaimableOverflowOf`\\n  */\\n  function _reclaimableOverflowOf(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _tokenCount,\\n    uint256 _balanceDecimals,\\n    uint256 _balanceCurrency\\n  ) private view returns (uint256) {\\n    // Get the amount of current overflow.\\n    // Use the local overflow if the funding cycle specifies that it should be used. Otherwise use the project's total overflow across all of its terminals.\\n    uint256 _currentOverflow = _fundingCycle.shouldUseLocalBalanceForRedemptions()\\n      ? _overflowDuring(_terminal, _projectId, _fundingCycle, _balanceCurrency)\\n      : _currentTotalOverflowOf(_projectId, _balanceDecimals, _balanceCurrency);\\n\\n    // If there is no overflow, nothing is claimable.\\n    if (_currentOverflow == 0) return 0;\\n\\n    // Get the total number of tokens in circulation.\\n    uint256 _totalSupply = tokenStore.totalSupplyOf(_projectId);\\n\\n    // Get the number of reserved tokens the project has.\\n    uint256 _reservedTokenAmount = directory.controllerOf(_projectId).reservedTokenBalanceOf(\\n      _projectId,\\n      _fundingCycle.reservedRate()\\n    );\\n\\n    // If there are reserved tokens, add them to the total supply.\\n    if (_reservedTokenAmount > 0) _totalSupply = _totalSupply + _reservedTokenAmount;\\n\\n    // If the amount being redeemed is the total supply, return the rest of the overflow.\\n    if (_tokenCount == _totalSupply) return _currentOverflow;\\n\\n    // Use the ballot redemption rate if the queued cycle is pending approval according to the previous funding cycle's ballot.\\n    uint256 _redemptionRate = fundingCycleStore.currentBallotStateOf(_projectId) ==\\n      JBBallotState.Active\\n      ? _fundingCycle.ballotRedemptionRate()\\n      : _fundingCycle.redemptionRate();\\n\\n    // If the redemption rate is 0, nothing is claimable.\\n    if (_redemptionRate == 0) return 0;\\n\\n    // Get a reference to the linear proportion.\\n    uint256 _base = PRBMath.mulDiv(_currentOverflow, _tokenCount, _totalSupply);\\n\\n    // These conditions are all part of the same curve. Edge conditions are separated because fewer operation are necessary.\\n    if (_redemptionRate == JBConstants.MAX_REDEMPTION_RATE) return _base;\\n\\n    return\\n      PRBMath.mulDiv(\\n        _base,\\n        _redemptionRate +\\n          PRBMath.mulDiv(\\n            _tokenCount,\\n            JBConstants.MAX_REDEMPTION_RATE - _redemptionRate,\\n            _totalSupply\\n          ),\\n        JBConstants.MAX_REDEMPTION_RATE\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of the terminal's token changes in relation to the currency being used to measure the distribution limit.\\n\\n    @param _terminal The terminal for which the overflow is being calculated.\\n    @param _projectId The ID of the project to get overflow for.\\n    @param _fundingCycle The ID of the funding cycle to base the overflow on.\\n    @param _balanceCurrency The currency that the stored balance is expected to be in terms of.\\n\\n    @return overflow The overflow of funds, as a fixed point number with 18 decimals.\\n  */\\n  function _overflowDuring(\\n    IJBPaymentTerminal _terminal,\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _balanceCurrency\\n  ) private view returns (uint256) {\\n    // Get the current balance of the project.\\n    uint256 _balanceOf = balanceOf[_terminal][_projectId];\\n\\n    // If there's no balance, there's no overflow.\\n    if (_balanceOf == 0) return 0;\\n\\n    // Get a reference to the amount still withdrawable during the funding cycle.\\n    uint256 _distributionRemaining = directory.controllerOf(_projectId).distributionLimitOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      _terminal\\n    ) - usedDistributionLimitOf[_terminal][_projectId][_fundingCycle.number];\\n\\n    // Get a reference to the current funding cycle's currency for this terminal.\\n    uint256 _distributionLimitCurrency = directory\\n      .controllerOf(_projectId)\\n      .distributionLimitCurrencyOf(_projectId, _fundingCycle.configuration, _terminal);\\n\\n    // Convert the _distributionRemaining to be in terms of the provided currency.\\n    if (_distributionRemaining != 0 && _distributionLimitCurrency != _balanceCurrency)\\n      _distributionRemaining = PRBMath.mulDiv(\\n        _distributionRemaining,\\n        10**_FIXED_POINT_MAX_FIDELITY, // Use _FIXED_POINT_MAX_FIDELITY to keep as much of the `_amount.value`'s fidelity as possible when converting.\\n        prices.priceFor(_distributionLimitCurrency, _balanceCurrency, _FIXED_POINT_MAX_FIDELITY)\\n      );\\n\\n    // Overflow is the balance of this project minus the amount that can still be distributed.\\n    return _balanceOf > _distributionRemaining ? _balanceOf - _distributionRemaining : 0;\\n  }\\n\\n  /**\\n    @notice\\n    Gets the amount that is overflowing across all terminals in terms of this store's terminal's currency when measured from the specified funding cycle.\\n\\n    @dev\\n    This amount changes as the price of the token changes in relation to the currency being used to measure the distribution limits.\\n\\n    @param _projectId The ID of the project to get total overflow for.\\n    @param _decimals The number of decimals that the fixed point overflow should include.\\n    @param _currency The currency that the overflow should be in terms of.\\n\\n    @return overflow The overflow of funds, as a fixed point number with 18 decimals\\n  */\\n  function _currentTotalOverflowOf(\\n    uint256 _projectId,\\n    uint256 _decimals,\\n    uint256 _currency\\n  ) private view returns (uint256) {\\n    // Get a reference to the project's terminals.\\n    IJBPaymentTerminal[] memory _terminals = directory.terminalsOf(_projectId);\\n\\n    // Keep a reference to the ETH overflow across all terminals, as a fixed point number with 18 decimals.\\n    uint256 _ethOverflow;\\n\\n    // Add the current ETH overflow for each terminal.\\n    for (uint256 _i = 0; _i < _terminals.length; _i++)\\n      _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId);\\n\\n    // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals.\\n    uint256 _totalOverflow18Decimal = _currency == JBCurrencies.ETH\\n      ? _ethOverflow\\n      : PRBMath.mulDiv(_ethOverflow, 10**18, prices.priceFor(JBCurrencies.ETH, _currency, 18));\\n\\n    // Adjust the decimals of the fixed point number if needed to match the target decimals.\\n    return\\n      (_decimals == 18)\\n        ? _totalOverflow18Decimal\\n        : _totalOverflow18Decimal.adjustDecimals(18, _decimals);\\n  }\\n}\\n\",\"keccak256\":\"0x72fb1f3ea2c0a92a15885a03a6625db5bac832f6b205b21157db131451559cd2\",\"license\":\"MIT\"},\"contracts/abstract/JBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBOperatable.sol';\\n\\n// --------------------------- custom errors -------------------------- //\\n//*********************************************************************//\\nerror UNAUTHORIZED();\\n\\n/** \\n  @notice\\n  Modifiers to allow access to functions based on the message sender's operator status.\\n*/\\nabstract contract JBOperatable is IJBOperatable {\\n  modifier requirePermission(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) {\\n    if (\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n\\n    _;\\n  }\\n\\n  modifier requirePermissionAllowingOverride(\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex,\\n    bool _override\\n  ) {\\n    if (\\n      !_override &&\\n      msg.sender != _account &&\\n      !operatorStore.hasPermission(msg.sender, _account, _domain, _permissionIndex) &&\\n      !operatorStore.hasPermission(msg.sender, _account, 0, _permissionIndex)\\n    ) revert UNAUTHORIZED();\\n\\n    _;\\n  }\\n\\n  /** \\n    @notice \\n    A contract storing operator assignments.\\n  */\\n  IJBOperatorStore public immutable override operatorStore;\\n\\n  /** \\n    @param _operatorStore A contract storing operator assignments.\\n  */\\n  constructor(IJBOperatorStore _operatorStore) {\\n    operatorStore = _operatorStore;\\n  }\\n}\\n\",\"keccak256\":\"0xa06d3963c762603ccf2e01c6b87a46f000389e3285a995216bdccf1adc5c640a\",\"license\":\"MIT\"},\"contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@paulrberg/contracts/math/PRBMath.sol';\\n\\nimport './JBOperatable.sol';\\nimport './../interfaces/IJBPayoutRedemptionPaymentTerminal.sol';\\nimport './../interfaces/IJBPaymentTerminal.sol';\\nimport './../libraries/JBConstants.sol';\\nimport './../libraries/JBCurrencies.sol';\\nimport './../libraries/JBOperations.sol';\\nimport './../libraries/JBSplitsGroups.sol';\\nimport './../libraries/JBTokens.sol';\\nimport './../libraries/JBFixedPointNumber.sol';\\n\\nimport './../structs/JBTokenAmount.sol';\\n\\nimport './../JBPaymentTerminalStore.sol';\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror FEE_TOO_HIGH();\\nerror PAY_TO_ZERO_ADDRESS();\\nerror PROJECT_TERMINAL_MISMATCH();\\nerror REDEEM_TO_ZERO_ADDRESS();\\nerror TERMINAL_IN_SPLIT_ZERO_ADDRESS();\\nerror TERMINAL_TOKENS_INCOMPATIBLE();\\nerror ZERO_VALUE_SENT();\\nerror NO_MSG_VALUE_ALLOWED();\\nerror INADEQUATE_TOKEN_COUNT();\\nerror INADEQUATE_DISTRIBUTION_AMOUNT();\\nerror INADEQUATE_RECLAIM_AMOUNT();\\n\\n/**\\n  @notice\\n  This contract manages all inflows and outflows of funds into the Juicebox ecosystem.\\n\\n  @dev\\n  A project can transfer its funds, along with the power to reconfigure and mint/burn their tokens, from this contract to another allowed terminal of the same token type contract at any time.\\n\\n  Inherits from:\\n\\n  IJBPayoutRedemptionPaymentTerminal - general interface for the methods in this contract.\\n  JBOperatable - several functions in this contract can only be accessed by a project owner, or an address that has been preconfifigured to be an operator of the project.\\n  ReentrencyGuard - several function in this contract shouldn't be accessible recursively.\\n*/\\nabstract contract JBPayoutRedemptionPaymentTerminal is\\n  IJBPayoutRedemptionPaymentTerminal,\\n  JBOperatable,\\n  Ownable,\\n  ReentrancyGuard\\n{\\n  // A library that parses the packed funding cycle metadata into a friendlier format.\\n  using JBFundingCycleMetadataResolver for JBFundingCycle;\\n\\n  // A library that provides utility for fixed point numbers.\\n  using JBFixedPointNumber for uint256;\\n\\n  /// @notice A modifier that verifies this terminal is a terminal of provided project ID\\n  modifier isTerminalOfProject(uint256 _projectId) {\\n    if (!directory.isTerminalOf(_projectId, this)) revert PROJECT_TERMINAL_MISMATCH();\\n    _;\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private stored constants -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Maximum fee that can be set for a funding cycle configuration.\\n\\n    @dev\\n    Out of MAX_FEE (50_000_000 / 1_000_000_000)\\n  */\\n  uint256 private constant _FEE_CAP = 50_000_000;\\n\\n  /**\\n    @notice\\n    The protocol project ID is 1, as it should be the first project launched during the deployment process.\\n  */\\n  uint256 private constant _PROTOCOL_PROJECT_ID = 1;\\n\\n  //*********************************************************************//\\n  // --------------------- private stored properties ------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Fees that are being held to be processed later.\\n\\n    _projectId The ID of the project for which fees are being held.\\n  */\\n  mapping(uint256 => JBFee[]) private _heldFeesOf;\\n\\n  //*********************************************************************//\\n  // ---------------- public immutable stored properties --------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The Projects contract which mints ERC-721's that represent project ownership and transfers.\\n  */\\n  IJBProjects public immutable override projects;\\n\\n  /**\\n    @notice\\n    The directory of terminals and controllers for projects.\\n  */\\n  IJBDirectory public immutable override directory;\\n\\n  /**\\n    @notice\\n    The contract that stores splits for each project.\\n  */\\n  IJBSplitsStore public immutable override splitsStore;\\n\\n  /**\\n    @notice\\n    The contract that exposes price feeds.\\n  */\\n  IJBPrices public immutable prices;\\n\\n  //*********************************************************************//\\n  // --------------------- public stored properties -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    The contract that stores and manages the terminal's data.\\n  */\\n  JBPaymentTerminalStore public immutable store;\\n\\n  /**\\n    @notice\\n    The token that this terminal accepts.\\n  */\\n  address public immutable override token;\\n\\n  /**\\n    @notice\\n    The number of decimals the token fixed point amounts are expected to have.\\n  */\\n  uint256 public immutable override decimals;\\n\\n  /**\\n    @notice\\n    The currency to use when resolving price feeds for this terminal.\\n  */\\n  uint256 public immutable override currency;\\n\\n  /**\\n    @notice\\n    The currency to base token issuance on.\\n\\n    @dev\\n    If this differs from `currency`, there must be a price feed available in `store.prices()` to convert `currency` to `baseWeightCurrency`\\n  */\\n  uint256 public immutable override baseWeightCurrency;\\n\\n  /**\\n    @notice\\n    The group that payout splits coming from this terminal are identified by.\\n  */\\n  uint256 public immutable override payoutSplitsGroup;\\n\\n  /**\\n    @notice\\n    The platform fee percent.\\n\\n    @dev\\n    Out of MAX_FEE (25_000_000 / 1_000_000_000)\\n  */\\n  uint256 public override fee = 25_000_000; // 2.5%\\n\\n  /**\\n    @notice\\n    The data source that returns a discount to apply to a project's fee.\\n  */\\n  IJBFeeGauge public override feeGauge;\\n\\n  /**\\n    @notice\\n    Terminals that can be paid towards from this terminal without incurring a fee.\\n\\n    _terminal The terminal that can be paid toward.\\n  */\\n  mapping(IJBPaymentTerminal => bool) public override isFeelessTerminal;\\n\\n  //*********************************************************************//\\n  // ------------------------- external views -------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Gets the current overflowed amount in this for a specified project, in terms of ETH.\\n\\n    @dev\\n    The current overflow is represented as a fixed point number with 18 decimals.\\n\\n    @param _projectId The ID of the project to get overflow for.\\n\\n    @return The current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals.\\n  */\\n  function currentEthOverflowOf(uint256 _projectId) external view override returns (uint256) {\\n    uint256 _overflow = store.currentOverflowOf(this, _projectId);\\n\\n    // Adjust the decimals of the fixed point number if needed to have 18 decimals.\\n    uint256 _adjustedOverflow = (decimals == 18)\\n      ? _overflow\\n      : _overflow.adjustDecimals(decimals, 18);\\n\\n    // Return the amount converted to ETH.\\n    return\\n      (currency == JBCurrencies.ETH)\\n        ? _adjustedOverflow\\n        : PRBMath.mulDiv(\\n          _adjustedOverflow,\\n          10**decimals,\\n          prices.priceFor(currency, JBCurrencies.ETH, decimals)\\n        );\\n  }\\n\\n  /**\\n    @notice\\n    The fees that are currently being held to be processed later for each project.\\n\\n    @param _projectId The ID of the project for which fees are being held.\\n\\n    @return An array of fees that are being held.\\n  */\\n  function heldFeesOf(uint256 _projectId) external view override returns (JBFee[] memory) {\\n    return _heldFeesOf[_projectId];\\n  }\\n\\n  //*********************************************************************//\\n  // -------------------------- constructor ---------------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @param _token The token that this terminal manages.\\n    @param _decimals The number of decimals the token fixed point amounts are expected to have.\\n    @param _currency The currency that this terminal's token adheres to for price feeds.\\n    @param _baseWeightCurrency The currency to base token issuance on.\\n    @param _payoutSplitsGroup The group that denotes payout splits from this terminal in the splits store.\\n    @param _operatorStore A contract storing operator assignments.\\n    @param _projects A contract which mints ERC-721's that represent project ownership and transfers.\\n    @param _directory A contract storing directories of terminals and controllers for each project.\\n    @param _splitsStore A contract that stores splits for each project.\\n    @param _prices A contract that exposes price feeds.\\n    @param _store A contract that stores the terminal's data.\\n    @param _owner The address that will own this contract.\\n  */\\n  constructor(\\n    address _token,\\n    uint256 _decimals,\\n    uint256 _currency,\\n    uint256 _baseWeightCurrency,\\n    uint256 _payoutSplitsGroup,\\n    IJBOperatorStore _operatorStore,\\n    IJBProjects _projects,\\n    IJBDirectory _directory,\\n    IJBSplitsStore _splitsStore,\\n    IJBPrices _prices,\\n    JBPaymentTerminalStore _store,\\n    address _owner\\n  ) JBOperatable(_operatorStore) {\\n    token = _token;\\n    decimals = _decimals;\\n    baseWeightCurrency = _baseWeightCurrency;\\n    payoutSplitsGroup = _payoutSplitsGroup;\\n    currency = _currency;\\n    projects = _projects;\\n    directory = _directory;\\n    splitsStore = _splitsStore;\\n    prices = _prices;\\n    store = _store;\\n\\n    transferOwnership(_owner);\\n  }\\n\\n  //*********************************************************************//\\n  // ---------------------- external transactions ---------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Contribute ETH to a project.\\n\\n    @param _amount The amount of terminal tokens being received, as a fixed point number with 18 decimals. If this terminal's token is ETH, this is ignored and msg.value is used in its place.\\n    @param _projectId The ID of the project being paid.\\n    @param _beneficiary The address to mint tokens for and pass along to the funding cycle's data source and delegate.\\n    @param _minReturnedTokens The minimum number of project tokens expected in return, as a fixed point\\n    @param _preferClaimedTokens A flag indicating whether the request prefers to issue tokens unstaked rather than staked.\\n    @param _memo A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.\\n    @param _metadata Bytes to send along to the data source and delegate, if provided.\\n  */\\n  function pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable virtual override nonReentrant isTerminalOfProject(_projectId) {\\n    // ETH shouldn't be sent if this terminal's token isn't ETH.\\n    if (token != JBTokens.ETH) {\\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\\n\\n      // Transfer tokens to this terminal from the msg sender.\\n      _transferFrom(msg.sender, payable(address(this)), _amount);\\n    }\\n    // If this terminal's token is ETH, override _amount with msg.value.\\n    else _amount = msg.value;\\n\\n    return\\n      _pay(\\n        _amount,\\n        msg.sender,\\n        _projectId,\\n        _beneficiary,\\n        _minReturnedTokens,\\n        _preferClaimedTokens,\\n        _memo,\\n        _metadata\\n      );\\n  }\\n\\n  /**\\n    @notice\\n    Distributes payouts for a project according to the constraints of its current funding cycle.\\n\\n    @dev\\n    Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner.\\n\\n    @dev\\n    Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function.\\n\\n    @param _projectId The ID of the project having its payouts distributed.\\n    @param _amount The amount of terminal tokens to distribute, as a fixed point number with 18 decimals.\\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.\\n    @param _minReturnedTokens The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedTokens,\\n    string memory _memo\\n  ) external virtual override nonReentrant {\\n    // Record the distribution.\\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\\n        _projectId,\\n        _amount,\\n        _currency,\\n        currency // The balance is in terms of this terminal's currency.\\n      );\\n\\n    // The amount being distributed must be at least as much as was expected.\\n    if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\\n\\n    // Get a reference to the project owner, which will receive tokens from paying the platform fee\\n    // and receive any extra distributable funds not allocated to payout splits.\\n    address payable _projectOwner = payable(projects.ownerOf(_projectId));\\n\\n    // Define variables that will be needed outside the scoped section below.\\n    uint256 _feeAmount;\\n    uint256 _leftoverDistributionAmount;\\n\\n    // Scoped section prevents stack too deep. `_feeDiscount` and `_feeEligibleDistributionAmount` only used within scope.\\n    {\\n      // Get the amount of discount that should be applied to any fees taken.\\n      uint256 _feeDiscount = fee == 0 ? JBConstants.MAX_FEE_DISCOUNT : _getFeeDiscount(_projectId);\\n\\n      // The amount distributed that is eligible for incurring fees.\\n      uint256 _feeEligibleDistributionAmount;\\n\\n      // Payout to splits and get a reference to the leftover transfer amount after all mods have been paid.\\n      // Also get a reference to the amount that was distributed that is eligible to have fees taken.\\n      // The net transfer amount is the withdrawn amount minus the fee.\\n      (_leftoverDistributionAmount, _feeEligibleDistributionAmount) = _distributeToPayoutSplitsOf(\\n        _projectId,\\n        _fundingCycle,\\n        _distributedAmount,\\n        _feeDiscount\\n      );\\n\\n      // Leftover distribution amount is also eligible for a fee since the funds are going out of the ecosystem to _beneficiary.\\n      _feeEligibleDistributionAmount += _leftoverDistributionAmount;\\n\\n      // Take the fee.\\n      _feeAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT ||\\n        _feeEligibleDistributionAmount == 0\\n        ? 0\\n        : _takeFeeFrom(\\n          _projectId,\\n          _fundingCycle,\\n          _feeEligibleDistributionAmount,\\n          _projectOwner,\\n          _feeDiscount\\n        );\\n\\n      // Transfer any remaining balance to the project owner.\\n      if (_leftoverDistributionAmount > 0)\\n        _transferFrom(\\n          address(this),\\n          _projectOwner,\\n          _leftoverDistributionAmount - _getFeeAmount(_leftoverDistributionAmount, _feeDiscount)\\n        );\\n    }\\n\\n    emit DistributePayouts(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _projectOwner,\\n      _amount,\\n      _distributedAmount,\\n      _feeAmount,\\n      _leftoverDistributionAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project to send funds from its overflow up to the preconfigured allowance.\\n\\n    @dev\\n    Only a project's owner or a designated operator can use its allowance.\\n\\n    @param _projectId The ID of the project to use the allowance of.\\n    @param _amount The amount of terminal tokens to use from this project's current allowance, as a fixed point number with 18 decimals.\\n    @param _currency The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.\\n    @param _minReturnedTokens The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.\\n    @param _beneficiary The address to send the funds to.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedTokens,\\n    address payable _beneficiary,\\n    string memory _memo\\n  )\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.USE_ALLOWANCE)\\n  {\\n    // Record the use of the allowance.\\n    (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordUsedAllowanceOf(\\n        _projectId,\\n        _amount,\\n        _currency,\\n        currency // The balance is in terms of this terminal's currency.\\n      );\\n\\n    // The amount being withdrawn must be at least as much as was expected.\\n    if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\\n\\n    // Define variables that will be needed outside the scoped section below.\\n    uint256 _feeAmount;\\n\\n    // Scoped section prevents stack too deep. `_projectOwner` and `_feeDiscount` only used within scope.\\n    {\\n      // Get a reference to the project owner, which will receive tokens from paying the platform fee.\\n      address _projectOwner = projects.ownerOf(_projectId);\\n\\n      // Get the amount of discount that should be applied to any fees taken.\\n      uint256 _feeDiscount = _getFeeDiscount(_projectId);\\n\\n      // Take a fee from the `_distributedAmount`, if needed.\\n      _feeAmount = fee == 0 || _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\\n        ? 0\\n        : _takeFeeFrom(_projectId, _fundingCycle, _distributedAmount, _projectOwner, _feeDiscount);\\n    }\\n\\n    // Scoped section prevents stack too deep. `_netAmount` only used within scope.\\n    {\\n      // The net amount is the withdrawn amount without the fee.\\n      uint256 _netAmount = _distributedAmount - _feeAmount;\\n\\n      // Transfer any remaining balance to the beneficiary.\\n      if (_netAmount > 0) _transferFrom(address(this), _beneficiary, _netAmount);\\n    }\\n\\n    emit UseAllowance(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _beneficiary,\\n      _amount,\\n      _distributedAmount,\\n      _feeAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Addresses can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source.\\n\\n    @dev\\n    Only a token's holder or a designated operator can redeem it.\\n\\n    @param _holder The account to redeem tokens for.\\n    @param _projectId The ID of the project to which the tokens being redeemed belong.\\n    @param _tokenCount The number of project tokens to redeem, as a fixed point number with 18 decimals.\\n    @param _minReturnedTokens The minimum amount of terminal tokens expected in return, as a fixed point number with 18 decimals.\\n    @param _beneficiary The address to send the terminal tokens to.\\n    @param _memo A memo to pass along to the emitted event.\\n    @param _metadata Bytes to send along to the data source and delegate, if provided.\\n\\n    @return reclaimAmount The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals.\\n  */\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    uint256 _minReturnedTokens,\\n    address payable _beneficiary,\\n    string memory _memo,\\n    bytes memory _metadata\\n  )\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    requirePermission(_holder, _projectId, JBOperations.REDEEM)\\n    returns (uint256 reclaimAmount)\\n  {\\n    // Can't send claimed funds to the zero address.\\n    if (_beneficiary == address(0)) revert REDEEM_TO_ZERO_ADDRESS();\\n\\n    // Keep a reference to the funding cycles during which the redemption is being made.\\n    JBFundingCycle memory _fundingCycle;\\n\\n    // Scoped section prevents stack too deep. `_delegate` only used within scope.\\n    {\\n      IJBRedemptionDelegate _delegate;\\n\\n      // Record the redemption.\\n      (_fundingCycle, reclaimAmount, _delegate, _memo) = store.recordRedemptionFor(\\n        _holder,\\n        _projectId,\\n        _tokenCount,\\n        decimals, // The fixed point balance has this terminal's token's number of decimals.\\n        currency, // The balance is in terms of this terminal's currency.\\n        _beneficiary,\\n        _memo,\\n        _metadata\\n      );\\n\\n      // The amount being reclaimed must be at least as much as was expected.\\n      if (reclaimAmount < _minReturnedTokens) revert INADEQUATE_RECLAIM_AMOUNT();\\n\\n      // Redeem the project tokens, which burns them.\\n      if (_tokenCount > 0)\\n        directory.controllerOf(_projectId).burnTokensOf(\\n          _holder,\\n          _projectId,\\n          _tokenCount,\\n          '',\\n          false\\n        );\\n\\n      // If a delegate was returned by the data source, issue a callback to it.\\n      if (_delegate != IJBRedemptionDelegate(address(0))) {\\n        JBDidRedeemData memory _data = JBDidRedeemData(\\n          _holder,\\n          _projectId,\\n          _tokenCount,\\n          JBTokenAmount(token, reclaimAmount, decimals, currency),\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        );\\n        _delegate.didRedeem(_data);\\n        emit DelegateDidRedeem(_delegate, _data, msg.sender);\\n      }\\n    }\\n\\n    // Send the claimed funds to the beneficiary.\\n    if (reclaimAmount > 0) _transferFrom(address(this), _beneficiary, reclaimAmount);\\n\\n    emit RedeemTokens(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _holder,\\n      _beneficiary,\\n      _tokenCount,\\n      reclaimAmount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    Allows a project owner to migrate its funds and operations to a new terminal of the same token type.\\n\\n    @dev\\n    Only a project's owner or a designated operator can migrate it.\\n\\n    @param _projectId The ID of the project being migrated.\\n    @param _to The terminal contract that will gain the project's funds.\\n  */\\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to)\\n    external\\n    virtual\\n    override\\n    nonReentrant\\n    requirePermission(projects.ownerOf(_projectId), _projectId, JBOperations.MIGRATE_TERMINAL)\\n  {\\n    // The terminal being migrated to must accept the same token as this terminal.\\n    if (token != _to.token()) revert TERMINAL_TOKENS_INCOMPATIBLE();\\n\\n    // Record the migration in the store.\\n    uint256 _balance = store.recordMigration(_projectId);\\n\\n    // Transfer the balance if needed.\\n    if (_balance > 0) {\\n      _beforeTransferTo(address(_to), _balance);\\n\\n      // If this terminal's token is ETH, send it in msg.value.\\n      uint256 _payableValue = token == JBTokens.ETH ? _balance : 0;\\n\\n      // Withdraw the balance to transfer to the new terminal;\\n      _to.addToBalanceOf{value: _payableValue}(_balance, _projectId, '');\\n    }\\n\\n    emit Migrate(_projectId, _to, _balance, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Receives funds belonging to the specified project.\\n\\n    @param _amount The amount of tokens to add, as a fixed point number with 18 decimals. If this is an ETH terminal, this is ignored and msg.value is used instead.\\n    @param _projectId The ID of the project to which the funds received belong.\\n    @param _memo A memo to pass along to the emitted event.\\n  */\\n  function addToBalanceOf(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    string memory _memo\\n  ) external payable virtual override nonReentrant isTerminalOfProject(_projectId) {\\n    // If this terminal's token isn't ETH, make sure no msg.value was sent, then transfer the tokens in from msg.sender.\\n    if (token != JBTokens.ETH) {\\n      // Amount must be greater than 0.\\n      if (msg.value > 0) revert NO_MSG_VALUE_ALLOWED();\\n\\n      // Transfer tokens to this terminal from the msg sender.\\n      _transferFrom(msg.sender, payable(address(this)), _amount);\\n    }\\n    // If the terminal's token is ETH, override `_amount` with msg.value.\\n    else _amount = msg.value;\\n\\n    _addToBalance(_amount, _projectId, _memo);\\n  }\\n\\n  /**\\n    @notice\\n    Process any fees that are being held for the project.\\n\\n    @dev\\n    Only a project owner, an operator, or the contract's owner can process held fees.\\n\\n    @param _projectId The ID of the project whos held fees should be processed.\\n  */\\n  function processFees(uint256 _projectId)\\n    external\\n    virtual\\n    override\\n    requirePermissionAllowingOverride(\\n      projects.ownerOf(_projectId),\\n      _projectId,\\n      JBOperations.PROCESS_FEES,\\n      msg.sender == owner()\\n    )\\n    nonReentrant\\n  {\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++)\\n      _processFee(\\n        _heldFees[_i].amount -\\n          PRBMath.mulDiv(\\n            _heldFees[_i].amount,\\n            JBConstants.MAX_FEE,\\n            _heldFees[_i].fee + JBConstants.MAX_FEE\\n          ),\\n        _heldFees[_i].beneficiary\\n      );\\n\\n    // Delete the held fee's now that they've been processed.\\n    delete _heldFeesOf[_projectId];\\n\\n    emit ProcessFees(_projectId, _heldFees, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows the fee to be updated.\\n\\n    @dev\\n    Only the owner of this contract can change the fee.\\n\\n    @param _fee The new fee, out of MAX_FEE.\\n  */\\n  function setFee(uint256 _fee) external virtual override onlyOwner {\\n    // The provided fee must be within the max.\\n    if (_fee > _FEE_CAP) revert FEE_TOO_HIGH();\\n\\n    // Store the new fee.\\n    fee = _fee;\\n\\n    emit SetFee(_fee, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Allows the fee gauge to be updated.\\n\\n    @dev\\n    Only the owner of this contract can change the fee gauge.\\n\\n    @param _feeGauge The new fee gauge.\\n  */\\n  function setFeeGauge(IJBFeeGauge _feeGauge) external virtual override onlyOwner {\\n    // Store the new fee gauge.\\n    feeGauge = _feeGauge;\\n\\n    emit SetFeeGauge(_feeGauge, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Toggles whether projects operating on this terminal can pay projects operating on other terminals without incurring a fee.\\n\\n    @dev\\n    Only the owner of this contract can change the fee.\\n\\n    @param _terminal The terminal that can be paid towards while still bypassing fees.\\n  */\\n  function toggleFeelessTerminal(IJBPaymentTerminal _terminal) external virtual override onlyOwner {\\n    // Toggle the value for the provided terminal.\\n    isFeelessTerminal[_terminal] = !isFeelessTerminal[_terminal];\\n\\n    emit SetFeelessTerminal(_terminal, msg.sender);\\n  }\\n\\n  //*********************************************************************//\\n  // --------------------- private helper functions -------------------- //\\n  //*********************************************************************//\\n\\n  /**\\n    @notice\\n    Pays out splits for a project's funding cycle configuration.\\n\\n    @param _projectId The ID of the project for which payout splits are being distributed.\\n    @param _fundingCycle The funding cycle during which the distribution is being made.\\n    @param _amount The total amount being distributed, as a fixed point number with 18 decimals.\\n    @param _feeDiscount The amount of discount to apply to the fee, out of the MAX_FEE.\\n\\n    @return leftoverAmount If the leftover amount if the splits don't add up to 100%.\\n    @return feeEligibleDistributionAmount The total amount of distributions that are eligible to have fees taken from.\\n  */\\n  function _distributeToPayoutSplitsOf(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount,\\n    uint256 _feeDiscount\\n  ) private returns (uint256 leftoverAmount, uint256 feeEligibleDistributionAmount) {\\n    // Set the leftover amount to the initial amount.\\n    leftoverAmount = _amount;\\n\\n    // Get a reference to the project's payout splits.\\n    JBSplit[] memory _splits = splitsStore.splitsOf(\\n      _projectId,\\n      _fundingCycle.configuration,\\n      payoutSplitsGroup\\n    );\\n\\n    //Transfer between all splits.\\n    for (uint256 _i = 0; _i < _splits.length; _i++) {\\n      // Get a reference to the split being iterated on.\\n      JBSplit memory _split = _splits[_i];\\n\\n      // The amount to send towards the split.\\n      uint256 _payoutAmount = PRBMath.mulDiv(\\n        _amount,\\n        _split.percent,\\n        JBConstants.SPLITS_TOTAL_PERCENT\\n      );\\n\\n      // The payout amount substracting any applicable incurred fees.\\n      uint256 _netPayoutAmount;\\n\\n      if (_payoutAmount > 0) {\\n        // Transfer tokens to the mod.\\n        // If there's an allocator set, transfer to its `allocate` function.\\n        if (_split.allocator != IJBSplitAllocator(address(0))) {\\n          _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\\n            ? _payoutAmount\\n            : _payoutAmount - _getFeeAmount(_payoutAmount, _feeDiscount);\\n\\n          // This distribution is eligible for a fee since the funds are leaving the ecosystem.\\n          feeEligibleDistributionAmount += _payoutAmount;\\n\\n          _beforeTransferTo(address(_split.allocator), _netPayoutAmount);\\n\\n          // If this terminal's token is ETH, send it in msg.value.\\n          uint256 _payableValue = token == JBTokens.ETH ? _netPayoutAmount : 0;\\n\\n          _split.allocator.allocate{value: _payableValue}(\\n            _netPayoutAmount,\\n            _projectId,\\n            payoutSplitsGroup,\\n            _split\\n          );\\n          // Otherwise, if a project is specified, make a payment to it.\\n        } else if (_split.projectId != 0) {\\n          // Get a reference to the Juicebox terminal being used.\\n          IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_split.projectId, token);\\n\\n          // The project must have a terminal to send funds to.\\n          if (_terminal == IJBPaymentTerminal(address(0))) revert TERMINAL_IN_SPLIT_ZERO_ADDRESS();\\n\\n          // Save gas if this contract is being used as the terminal.\\n          if (_terminal == this) {\\n            // This distribution does not incur a fee.\\n            _netPayoutAmount = _payoutAmount;\\n\\n            _pay(\\n              _netPayoutAmount,\\n              address(this),\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              '',\\n              bytes('')\\n            );\\n          } else {\\n            // If the terminal is set as feeless, this distribution is not eligible for a fee.\\n            if (isFeelessTerminal[_terminal])\\n              _netPayoutAmount = _payoutAmount;\\n              // This distribution is eligible for a fee since the funds are leaving this contract and the terminal isn't listed as feeless.\\n            else {\\n              _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\\n                ? _payoutAmount\\n                : _payoutAmount - _getFeeAmount(_payoutAmount, _feeDiscount);\\n\\n              feeEligibleDistributionAmount += _payoutAmount;\\n            }\\n\\n            _beforeTransferTo(address(_terminal), _netPayoutAmount);\\n\\n            // If this terminal's token is ETH, send it in msg.value.\\n            uint256 _payableValue = token == JBTokens.ETH ? _netPayoutAmount : 0;\\n\\n            _terminal.pay{value: _payableValue}(\\n              _netPayoutAmount,\\n              _split.projectId,\\n              _split.beneficiary,\\n              0,\\n              _split.preferClaimed,\\n              '',\\n              bytes('')\\n            );\\n          }\\n        } else {\\n          _netPayoutAmount = _feeDiscount == JBConstants.MAX_FEE_DISCOUNT\\n            ? _payoutAmount\\n            : _payoutAmount - _getFeeAmount(_payoutAmount, _feeDiscount);\\n\\n          // This distribution is eligible for a fee since the funds are leaving the ecosystem.\\n          feeEligibleDistributionAmount += _payoutAmount;\\n\\n          // If there's a beneficiary, send the funds directly to the beneficiary. Otherwise send to the msg.sender\\n          _transferFrom(\\n            address(this),\\n            _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender),\\n            _netPayoutAmount\\n          );\\n        }\\n\\n        // Subtract from the amount to be sent to the beneficiary.\\n        leftoverAmount = leftoverAmount - _payoutAmount;\\n      }\\n\\n      emit DistributeToPayoutSplit(\\n        _fundingCycle.configuration,\\n        _fundingCycle.number,\\n        _projectId,\\n        _split,\\n        _netPayoutAmount,\\n        msg.sender\\n      );\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    Takes a fee into the platform's project, which has an id of _PROTOCOL_PROJECT_ID.\\n\\n    @param _projectId The ID of the project having fees taken from.\\n    @param _fundingCycle The funding cycle during which the fee is being taken.\\n    @param _amount The amount of the fee to take, as a floating point number with 18 decimals.\\n    @param _beneficiary The address to print the platforms tokens for.\\n    @param _feeDiscount The amount of discount to apply to the fee, out of the MAX_FEE.\\n\\n    @return feeAmount The amount of the fee taken.\\n  */\\n  function _takeFeeFrom(\\n    uint256 _projectId,\\n    JBFundingCycle memory _fundingCycle,\\n    uint256 _amount,\\n    address _beneficiary,\\n    uint256 _feeDiscount\\n  ) private returns (uint256 feeAmount) {\\n    feeAmount = _getFeeAmount(_amount, _feeDiscount);\\n    _fundingCycle.shouldHoldFees()\\n      ? _heldFeesOf[_projectId].push(JBFee(_amount, uint32(fee), _beneficiary))\\n      : _processFee(feeAmount, _beneficiary); // Take the fee.\\n  }\\n\\n  /**\\n    @notice\\n    Take a fee of the specified amount.\\n\\n    @param _fee The fee amount, as a floating point number with 18 decimals.\\n    @param _beneficiary The address to mint the platforms tokens for.\\n  */\\n  function _processFee(uint256 _fee, address _beneficiary) private {\\n    // Get the terminal for the protocol project.\\n    IJBPaymentTerminal _terminal = directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token);\\n\\n    // When processing the admin fee, save gas if the admin is using this contract as its terminal.\\n    if (_terminal == this)\\n      _pay(_fee, address(this), _PROTOCOL_PROJECT_ID, _beneficiary, 0, false, '', bytes('')); // Use the local pay call.\\n    else {\\n      _beforeTransferTo(address(_terminal), _fee);\\n\\n      // If this terminal's token is ETH, send it in msg.value.\\n      uint256 _payableValue = token == JBTokens.ETH ? _fee : 0;\\n\\n      _terminal.pay{value: _payableValue}(\\n        _fee,\\n        _PROTOCOL_PROJECT_ID,\\n        _beneficiary,\\n        0,\\n        false,\\n        '',\\n        bytes('')\\n      ); // Use the external pay call of the correct terminal.\\n    }\\n  }\\n\\n  /**\\n    @notice\\n    See the documentation for 'pay'.\\n  */\\n  function _pay(\\n    uint256 _amount,\\n    address _payer,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string memory _memo,\\n    bytes memory _metadata\\n  ) private {\\n    // Cant send tokens to the zero address.\\n    if (_beneficiary == address(0)) revert PAY_TO_ZERO_ADDRESS();\\n\\n    JBFundingCycle memory _fundingCycle;\\n    uint256 _beneficiaryTokenCount;\\n\\n    // Scoped section prevents stack too deep. `_delegate` and `_tokenCount` only used within scope.\\n    {\\n      IJBPayDelegate _delegate;\\n      uint256 _tokenCount;\\n\\n      // Bundle the amount info into a JBTokenAmount struct.\\n      JBTokenAmount memory _bundledAmount = JBTokenAmount(token, _amount, decimals, currency);\\n\\n      // Record the payment.\\n      (_fundingCycle, _tokenCount, _delegate, _memo) = store.recordPaymentFrom(\\n        _payer,\\n        _bundledAmount,\\n        _projectId,\\n        _beneficiary,\\n        baseWeightCurrency,\\n        _memo,\\n        _metadata\\n      );\\n\\n      // Mint the tokens if needed.\\n      if (_tokenCount > 0)\\n        // Set token count to be the number of tokens minted for the beneficiary instead of the total amount.\\n        _beneficiaryTokenCount = directory.controllerOf(_projectId).mintTokensOf(\\n          _projectId,\\n          _tokenCount,\\n          _beneficiary,\\n          '',\\n          _preferClaimedTokens,\\n          true\\n        );\\n\\n      // The token count for the beneficiary must be greater than or equal to the minimum expected.\\n      if (_beneficiaryTokenCount < _minReturnedTokens) revert INADEQUATE_TOKEN_COUNT();\\n\\n      // If a delegate was returned by the data source, issue a callback to it.\\n      if (_delegate != IJBPayDelegate(address(0))) {\\n        JBDidPayData memory _data = JBDidPayData(\\n          _payer,\\n          _projectId,\\n          _bundledAmount,\\n          _beneficiaryTokenCount,\\n          _beneficiary,\\n          _memo,\\n          _metadata\\n        );\\n\\n        _delegate.didPay(_data);\\n        emit DelegateDidPay(_delegate, _data, msg.sender);\\n      }\\n    }\\n\\n    emit Pay(\\n      _fundingCycle.configuration,\\n      _fundingCycle.number,\\n      _projectId,\\n      _beneficiary,\\n      _amount,\\n      _beneficiaryTokenCount,\\n      _memo,\\n      msg.sender\\n    );\\n  }\\n\\n  /**\\n    @notice\\n    See the documentation for 'addToBalance'.\\n  */\\n  function _addToBalance(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    string memory _memo\\n  ) private {\\n    // Record the added funds.\\n    store.recordAddedBalanceFor(_projectId, _amount);\\n\\n    // Refund any held fees to make sure the project doesn't pay double for funds going in and out of the protocol.\\n    _refundHeldFees(_projectId, _amount);\\n\\n    emit AddToBalance(_projectId, _amount, _memo, msg.sender);\\n  }\\n\\n  /**\\n    @notice\\n    Refund fees based on the specified amount.\\n\\n    @param _projectId The project for which fees are being refunded.\\n    @param _amount The amount to base the refund on, as a fixed point number with 18 decimals.\\n  */\\n  function _refundHeldFees(uint256 _projectId, uint256 _amount) private {\\n    // Get a reference to the project's held fees.\\n    JBFee[] memory _heldFees = _heldFeesOf[_projectId];\\n\\n    // Delete the current held fees.\\n    delete _heldFeesOf[_projectId];\\n\\n    // Process each fee.\\n    for (uint256 _i = 0; _i < _heldFees.length; _i++) {\\n      if (_amount == 0) _heldFeesOf[_projectId].push(_heldFees[_i]);\\n      else if (_amount >= _heldFees[_i].amount) _amount = _amount - _heldFees[_i].amount;\\n      else {\\n        _heldFeesOf[_projectId].push(\\n          JBFee(_heldFees[_i].amount - _amount, _heldFees[_i].fee, _heldFees[_i].beneficiary)\\n        );\\n        _amount = 0;\\n      }\\n    }\\n  }\\n\\n  /** \\n    @notice \\n    Returns the fee amount based on the provided amount for the specified project.\\n\\n    @param _amount The amount that the fee is based on, as a fixed point number with 18 decimals.\\n    @param _feeDiscount The percentage discount that should be applied out of the max amount, out of MAX_FEE_DISCOUNT\\n\\n    @return The amount of the fee, as a fixed point number with 18 decimals.\\n  */\\n  function _getFeeAmount(uint256 _amount, uint256 _feeDiscount) private view returns (uint256) {\\n    // Calculate the discounted fee.\\n    uint256 _discountedFee = fee - PRBMath.mulDiv(fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\\n\\n    // The amount of ETH from the _amount to pay as a fee.\\n    return\\n      _amount - PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\\n  }\\n\\n  /** \\n    @notice\\n    Get the fee discount from the fee gauge for the specified project.\\n\\n    @param _projectId The ID of the project to get a fee discount for.\\n    \\n    @return feeDiscount The fee discount, which should be interpreted as a percentage out MAX_FEE_DISCOUNT.\\n  */\\n  function _getFeeDiscount(uint256 _projectId) private view returns (uint256 feeDiscount) {\\n    // Can't take a fee if the protocol project doesn't have a terminal that accepts the token.\\n    if (directory.primaryTerminalOf(_PROTOCOL_PROJECT_ID, token) == IJBPaymentTerminal(address(0)))\\n      return JBConstants.MAX_FEE_DISCOUNT;\\n\\n    // Get the fee discount.\\n    feeDiscount = feeGauge == IJBFeeGauge(address(0)) ? 0 : feeGauge.currentDiscountFor(_projectId);\\n\\n    // Set the discounted fee if its valid.\\n    if (feeDiscount > JBConstants.MAX_FEE_DISCOUNT) feeDiscount = 0;\\n  }\\n\\n  function _transferFrom(\\n    address _from,\\n    address payable _to,\\n    uint256 _amount\\n  ) internal virtual;\\n\\n  function _beforeTransferTo(address _to, uint256 _amount) internal virtual;\\n}\\n\",\"keccak256\":\"0xf21367bec047d85585788182b6e127369042931825cd3972a8a9d1ff77d976ac\",\"license\":\"MIT\"},\"contracts/enums/JBBallotState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nenum JBBallotState {\\n  Approved,\\n  Active,\\n  Failed\\n}\\n\",\"keccak256\":\"0xda8544e199de385d447fc485037d66ba906a88985328a5e1e0ddcb178b44f382\",\"license\":\"MIT\"},\"contracts/interfaces/IJBController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBFundingCycleStore.sol';\\n\\ninterface IJBController {\\n  function reservedTokenBalanceOf(uint256 _projectId, uint256 _reservedRate)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function prepForMigrationOf(uint256 _projectId, IJBController _from) external;\\n\\n  function mintTokensOf(\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    address _beneficiary,\\n    string calldata _memo,\\n    bool _preferClaimedTokens,\\n    bool _useReservedRate\\n  ) external returns (uint256 beneficiaryTokenCount);\\n\\n  function burnTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _tokenCount,\\n    string calldata _memo,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function overflowAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function overflowAllowanceCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n\\n  function distributionLimitCurrencyOf(\\n    uint256 _projectId,\\n    uint256 _configuration,\\n    IJBPaymentTerminal _terminal\\n  ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b6f58f353fda8548d2d8df209cd1c8b6f4bdd948c18cc4836f9c6cf6f9a0365\",\"license\":\"MIT\"},\"contracts/interfaces/IJBDirectory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBProjects.sol';\\nimport './IJBController.sol';\\n\\ninterface IJBDirectory {\\n  event SetController(uint256 indexed projectId, IJBController indexed controller, address caller);\\n\\n  event AddTerminal(uint256 indexed projectId, IJBPaymentTerminal indexed terminal, address caller);\\n\\n  event RemoveTerminal(\\n    uint256 indexed projectId,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event SetPrimaryTerminal(\\n    uint256 indexed projectId,\\n    address indexed token,\\n    IJBPaymentTerminal indexed terminal,\\n    address caller\\n  );\\n\\n  event AddToSetControllerAllowlist(address indexed _address, address caller);\\n\\n  event RemoveFromSetControllerAllowlist(address indexed _address, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function controllerOf(uint256 _projectId) external view returns (IJBController);\\n\\n  function isAllowedToSetController(address _address) external view returns (bool);\\n\\n  function primaryTerminalOf(uint256 _projectId, address _token)\\n    external\\n    view\\n    returns (IJBPaymentTerminal);\\n\\n  function terminalsOf(uint256 _projectId) external view returns (IJBPaymentTerminal[] memory);\\n\\n  function isTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal)\\n    external\\n    view\\n    returns (bool);\\n\\n  function addTerminalsOf(uint256 _projectId, IJBPaymentTerminal[] calldata _terminals) external;\\n\\n  function removeTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function setControllerOf(uint256 _projectId, IJBController _controller) external;\\n\\n  function setPrimaryTerminalOf(uint256 _projectId, IJBPaymentTerminal _terminal) external;\\n\\n  function addToSetControllerAllowlist(address _address) external;\\n\\n  function removeFromSetControllerAllowlist(address _address) external;\\n}\\n\",\"keccak256\":\"0xf0a97fc3d99d7270f4a4bdbf775f15f9551636ebdffe03d65a92140ac6c45c5f\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFeeGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBFeeGauge {\\n  function currentDiscountFor(uint256 _projectId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31d5a745fa68db11c5b9c43f251503d226e5df4c0fc62b146bd41d0e32a62c4b\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleBallot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../enums/JBBallotState.sol';\\n\\ninterface IJBFundingCycleBallot {\\n  function duration() external view returns (uint256);\\n\\n  function stateOf(uint256 _projectId, uint256 _configured) external view returns (JBBallotState);\\n}\\n\",\"keccak256\":\"0x9d8c9b9f1c66e7c923cc8e9518fb06b4180fea51f376ba39bc4a15171e5219aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleDataSource.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './IJBPayDelegate.sol';\\nimport './IJBRedemptionDelegate.sol';\\n\\nimport './../structs/JBPayParamsData.sol';\\nimport './../structs/JBRedeemParamsData.sol';\\n\\ninterface IJBFundingCycleDataSource {\\n  function payParams(JBPayParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 weight,\\n      string memory memo,\\n      IJBPayDelegate delegate\\n    );\\n\\n  function redeemParams(JBRedeemParamsData calldata _param)\\n    external\\n    view\\n    returns (\\n      uint256 reclaimAmount,\\n      string memory memo,\\n      IJBRedemptionDelegate delegate\\n    );\\n}\\n\",\"keccak256\":\"0x7126a0e53e4a1325dff9cde62b5a3a8c9d2a62b6fce785dc3f4094db948417d4\",\"license\":\"MIT\"},\"contracts/interfaces/IJBFundingCycleStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleBallot.sol';\\nimport './../structs/JBFundingCycle.sol';\\nimport './../structs/JBFundingCycleData.sol';\\n\\ninterface IJBFundingCycleStore {\\n  event Configure(\\n    uint256 indexed configuration,\\n    uint256 indexed projectId,\\n    JBFundingCycleData data,\\n    uint256 metadata,\\n    uint256 mustStartAtOrAfter,\\n    address caller\\n  );\\n\\n  event Init(uint256 indexed configuration, uint256 indexed projectId, uint256 indexed basedOn);\\n\\n  function latestConfigurationOf(uint256 _projectId) external view returns (uint256);\\n\\n  function get(uint256 _projectId, uint256 _configuration)\\n    external\\n    view\\n    returns (JBFundingCycle memory);\\n\\n  function queuedOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentOf(uint256 _projectId) external view returns (JBFundingCycle memory);\\n\\n  function currentBallotStateOf(uint256 _projectId) external view returns (JBBallotState);\\n\\n  function configureFor(\\n    uint256 _projectId,\\n    JBFundingCycleData calldata _data,\\n    uint256 _metadata,\\n    uint256 _mustStartAtOrAfter\\n  ) external returns (JBFundingCycle memory fundingCycle);\\n}\\n\",\"keccak256\":\"0xf8212a9e70b63c818f53aec3ed8728a2679d7b984d93b67a7d7e2890b6da8260\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\n\\ninterface IJBOperatable {\\n  function operatorStore() external view returns (IJBOperatorStore);\\n}\\n\",\"keccak256\":\"0x150097e253a667d2336367445bea019bb3669ef7c82d358befe1f4cdd480e9aa\",\"license\":\"MIT\"},\"contracts/interfaces/IJBOperatorStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBOperatorData.sol';\\n\\ninterface IJBOperatorStore {\\n  event SetOperator(\\n    address indexed operator,\\n    address indexed account,\\n    uint256 indexed domain,\\n    uint256[] permissionIndexes,\\n    uint256 packed\\n  );\\n\\n  function permissionsOf(\\n    address _operator,\\n    address _account,\\n    uint256 _domain\\n  ) external view returns (uint256);\\n\\n  function hasPermission(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256 _permissionIndex\\n  ) external view returns (bool);\\n\\n  function hasPermissions(\\n    address _operator,\\n    address _account,\\n    uint256 _domain,\\n    uint256[] calldata _permissionIndexes\\n  ) external view returns (bool);\\n\\n  function setOperator(JBOperatorData calldata _operatorData) external;\\n\\n  function setOperators(JBOperatorData[] calldata _operatorData) external;\\n}\\n\",\"keccak256\":\"0x50a26fddc575a50176df7deb9225ec1816b0158c9e9b8555e7921a3261254ed8\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../structs/JBDidPayData.sol';\\n\\ninterface IJBPayDelegate {\\n  function didPay(JBDidPayData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xec7fcab267fc1227d983c9420373beece78a2a4243c44bfab01d12262818ab8e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBDirectory.sol';\\n\\ninterface IJBPaymentTerminal {\\n  function token() external view returns (address);\\n\\n  function decimals() external view returns (uint256);\\n\\n  function currency() external view returns (uint256);\\n\\n  function baseWeightCurrency() external view returns (uint256);\\n\\n  function payoutSplitsGroup() external view returns (uint256);\\n\\n  // Return value must be a fixed point number with 18 decimals.\\n  function currentEthOverflowOf(uint256 _projectId) external view returns (uint256);\\n\\n  function pay(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    address _beneficiary,\\n    uint256 _minReturnedTokens,\\n    bool _preferClaimedTokens,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external payable;\\n\\n  function addToBalanceOf(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    string memory _memo\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x26e1135c6279d68d0dd485edb042eb9c0c8946ae6a17c3039241ec3483a96a92\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPayoutRedemptionPaymentTerminal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitsStore.sol';\\nimport './IJBFundingCycleStore.sol';\\nimport './IJBPayDelegate.sol';\\nimport './IJBTokenStore.sol';\\nimport './IJBPrices.sol';\\nimport './IJBRedemptionDelegate.sol';\\nimport './IJBFeeGauge.sol';\\nimport './IJBPaymentTerminal.sol';\\n\\nimport './../structs/JBFee.sol';\\n\\ninterface IJBPayoutRedemptionPaymentTerminal is IJBPaymentTerminal {\\n  event AddToBalance(uint256 indexed projectId, uint256 amount, string memo, address caller);\\n  event Migrate(\\n    uint256 indexed projectId,\\n    IJBPaymentTerminal indexed to,\\n    uint256 amount,\\n    address caller\\n  );\\n  event DistributePayouts(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 distributedAmount,\\n    uint256 feeAmount,\\n    uint256 beneficiaryDistributionAmount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event UseAllowance(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 distributedAmount,\\n    uint256 feeAmount,\\n    string memo,\\n    address caller\\n  );\\n  event ProcessFees(uint256 indexed projectId, JBFee[] fees, address caller);\\n  event Pay(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address beneficiary,\\n    uint256 amount,\\n    uint256 beneficiaryTokenCount,\\n    string memo,\\n    address caller\\n  );\\n  event DelegateDidPay(IJBPayDelegate indexed delegate, JBDidPayData data, address caller);\\n  event RedeemTokens(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    address holder,\\n    address beneficiary,\\n    uint256 tokenCount,\\n    uint256 claimedAmount,\\n    string memo,\\n    address caller\\n  );\\n\\n  event DelegateDidRedeem(\\n    IJBRedemptionDelegate indexed delegate,\\n    JBDidRedeemData data,\\n    address caller\\n  );\\n\\n  event DistributeToPayoutSplit(\\n    uint256 indexed fundingCycleConfiguration,\\n    uint256 indexed fundingCycleNumber,\\n    uint256 indexed projectId,\\n    JBSplit split,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event SetFee(uint256 fee, address caller);\\n\\n  event SetFeeGauge(IJBFeeGauge feeGauge, address caller);\\n\\n  event SetFeelessTerminal(IJBPaymentTerminal terminal, address caller);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function splitsStore() external view returns (IJBSplitsStore);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function heldFeesOf(uint256 _projectId) external view returns (JBFee[] memory);\\n\\n  function fee() external view returns (uint256);\\n\\n  function feeGauge() external view returns (IJBFeeGauge);\\n\\n  function isFeelessTerminal(IJBPaymentTerminal _terminal) external view returns (bool);\\n\\n  function distributePayoutsOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedAmount,\\n    string memory _memo\\n  ) external;\\n\\n  function redeemTokensOf(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _count,\\n    uint256 _minReturnedAmount,\\n    address payable _beneficiary,\\n    string calldata _memo,\\n    bytes calldata _metadata\\n  ) external returns (uint256 claimedAmount);\\n\\n  function useAllowanceOf(\\n    uint256 _projectId,\\n    uint256 _amount,\\n    uint256 _currency,\\n    uint256 _minReturnedAmount,\\n    address payable _beneficiary,\\n    string memory _memo\\n  ) external;\\n\\n  function migrate(uint256 _projectId, IJBPaymentTerminal _to) external;\\n\\n  function processFees(uint256 _projectId) external;\\n\\n  function setFee(uint256 _fee) external;\\n\\n  function setFeeGauge(IJBFeeGauge _feeGauge) external;\\n\\n  function toggleFeelessTerminal(IJBPaymentTerminal _terminal) external;\\n}\\n\",\"keccak256\":\"0x9422980a40be36f110e6ee72e3f75101090e5c402cf3325d026bf02e8e6976dd\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBPriceFeed {\\n  function currentPrice(uint256 _targetDecimals) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac22ef5e35cdd64b1467416fd142801856ce867ecde41582f3aa437c955c9be2\",\"license\":\"MIT\"},\"contracts/interfaces/IJBPrices.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBPriceFeed.sol';\\n\\ninterface IJBPrices {\\n  event AddFeed(uint256 indexed currency, uint256 indexed base, IJBPriceFeed feed);\\n\\n  function feedFor(uint256 _currency, uint256 _base) external view returns (IJBPriceFeed);\\n\\n  function priceFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    uint256 _decimals\\n  ) external view returns (uint256);\\n\\n  function addFeedFor(\\n    uint256 _currency,\\n    uint256 _base,\\n    IJBPriceFeed _priceFeed\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0d9c3fce264953aaeca00db1f8d8a3cf99876fa63366f5a2148f7966967b39b7\",\"license\":\"MIT\"},\"contracts/interfaces/IJBProjects.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport './IJBPaymentTerminal.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\nimport './../structs/JBProjectMetadata.sol';\\nimport './IJBTokenUriResolver.sol';\\n\\ninterface IJBProjects is IERC721 {\\n  event Create(\\n    uint256 indexed projectId,\\n    address indexed owner,\\n    JBProjectMetadata metadata,\\n    address caller\\n  );\\n\\n  event SetMetadata(uint256 indexed projectId, JBProjectMetadata metadata, address caller);\\n\\n  event SetTokenUriResolver(IJBTokenUriResolver resolver, address caller);\\n\\n  function count() external view returns (uint256);\\n\\n  function metadataContentOf(uint256 _projectId, uint256 _domain)\\n    external\\n    view\\n    returns (string memory);\\n\\n  function tokenUriResolver() external view returns (IJBTokenUriResolver);\\n\\n  function createFor(address _owner, JBProjectMetadata calldata _metadata)\\n    external\\n    returns (uint256 projectId);\\n\\n  function setMetadataOf(uint256 _projectId, JBProjectMetadata calldata _metadata) external;\\n\\n  function setTokenUriResolver(IJBTokenUriResolver _newResolver) external;\\n}\\n\",\"keccak256\":\"0x4482009111379531b33b6d924760987a6a68c83eeb71092d74fccd65960ca5ce\",\"license\":\"MIT\"},\"contracts/interfaces/IJBRedemptionDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBFundingCycleStore.sol';\\n\\nimport './../structs/JBDidRedeemData.sol';\\n\\ninterface IJBRedemptionDelegate {\\n  function didRedeem(JBDidRedeemData calldata _param) external;\\n}\\n\",\"keccak256\":\"0xbfeeb100e450c3cf5565a53a34a693f4963f09136bfea7e050efc3f8e1dea095\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '../structs/JBSplit.sol';\\n\\ninterface IJBSplitAllocator {\\n  function allocate(\\n    uint256 _amount,\\n    uint256 _projectId,\\n    uint256 _group,\\n    JBSplit calldata _split\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xb203a9130c48dfeed047f4cdca7e250479295fb0c65041869b3c2e4303525669\",\"license\":\"MIT\"},\"contracts/interfaces/IJBSplitsStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBOperatorStore.sol';\\nimport './IJBProjects.sol';\\nimport './IJBDirectory.sol';\\nimport './IJBSplitAllocator.sol';\\n\\nimport './../structs/JBSplit.sol';\\n\\ninterface IJBSplitsStore {\\n  event SetSplit(\\n    uint256 indexed projectId,\\n    uint256 indexed domain,\\n    uint256 indexed group,\\n    JBSplit split,\\n    address caller\\n  );\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function directory() external view returns (IJBDirectory);\\n\\n  function splitsOf(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group\\n  ) external view returns (JBSplit[] memory);\\n\\n  function set(\\n    uint256 _projectId,\\n    uint256 _domain,\\n    uint256 _group,\\n    JBSplit[] memory _splits\\n  ) external;\\n}\\n\",\"keccak256\":\"0x62053dc00bc5e2042983fc5136dd91ca6ff2fe21d293fa0b58b5f907a95d04d9\",\"license\":\"MIT\"},\"contracts/interfaces/IJBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBToken {\\n  function totalSupply(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _account, uint256 _projectId) external view returns (uint256);\\n\\n  function mint(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function burn(\\n    uint256 _projectId,\\n    address _account,\\n    uint256 _amount\\n  ) external;\\n\\n  function approve(\\n    uint256,\\n    address _spender,\\n    uint256 _amount\\n  ) external;\\n\\n  function transfer(\\n    uint256 _projectId,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    uint256 _projectId,\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x688d18bdbccb02a12874a0657661905a734ae1c9572c9b16ce076225a19a0b7e\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IJBProjects.sol';\\nimport './IJBToken.sol';\\n\\ninterface IJBTokenStore {\\n  event Issue(\\n    uint256 indexed projectId,\\n    IJBToken indexed token,\\n    string name,\\n    string symbol,\\n    address caller\\n  );\\n\\n  event Mint(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    bool tokensWereClaimed,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Burn(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 amount,\\n    uint256 initialUnclaimedBalance,\\n    uint256 initialClaimedBalance,\\n    bool preferClaimedTokens,\\n    address caller\\n  );\\n\\n  event Claim(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    uint256 initialUnclaimedBalance,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  event ShouldRequireClaim(uint256 indexed projectId, bool indexed flag, address caller);\\n\\n  event Change(\\n    uint256 indexed projectId,\\n    IJBToken indexed newToken,\\n    IJBToken indexed oldToken,\\n    address owner,\\n    address caller\\n  );\\n\\n  event Transfer(\\n    address indexed holder,\\n    uint256 indexed projectId,\\n    address indexed recipient,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  function tokenOf(uint256 _projectId) external view returns (IJBToken);\\n\\n  function projects() external view returns (IJBProjects);\\n\\n  function unclaimedBalanceOf(address _holder, uint256 _projectId) external view returns (uint256);\\n\\n  function unclaimedTotalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function totalSupplyOf(uint256 _projectId) external view returns (uint256);\\n\\n  function balanceOf(address _holder, uint256 _projectId) external view returns (uint256 _result);\\n\\n  function requireClaimFor(uint256 _projectId) external view returns (bool);\\n\\n  function issueFor(\\n    uint256 _projectId,\\n    string calldata _name,\\n    string calldata _symbol\\n  ) external returns (IJBToken token);\\n\\n  function changeFor(\\n    uint256 _projectId,\\n    IJBToken _token,\\n    address _newOwner\\n  ) external returns (IJBToken oldToken);\\n\\n  function burnFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function mintFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount,\\n    bool _preferClaimedTokens\\n  ) external;\\n\\n  function shouldRequireClaimingFor(uint256 _projectId, bool _flag) external;\\n\\n  function claimFor(\\n    address _holder,\\n    uint256 _projectId,\\n    uint256 _amount\\n  ) external;\\n\\n  function transferFrom(\\n    address _holder,\\n    uint256 _projectId,\\n    address _recipient,\\n    uint256 _amount\\n  ) external;\\n}\\n\",\"keccak256\":\"0x53264aaec59002551df79886591b1b7a53e8d01c64e31eea677945e828ee0259\",\"license\":\"MIT\"},\"contracts/interfaces/IJBTokenUriResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IJBTokenUriResolver {\\n  function getUri(uint256 _projectId) external view returns (string memory tokenUri);\\n}\\n\",\"keccak256\":\"0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475\",\"license\":\"MIT\"},\"contracts/libraries/JBConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n  @notice\\n  Global constants used across multiple Juicebox contracts.\\n*/\\nlibrary JBConstants {\\n  /** \\n    @notice\\n    Maximum value for reserved, redemption, and ballot redemption rates. Does not include discount rate.\\n  */\\n  uint256 public constant MAX_RESERVED_RATE = 10000;\\n\\n  /**\\n    @notice\\n    Maximum token redemption rate.  \\n    */\\n  uint256 public constant MAX_REDEMPTION_RATE = 10000;\\n\\n  /** \\n    @notice\\n    A funding cycle's discount rate is expressed as a percentage out of 1000000000.\\n  */\\n  uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum splits percentage.\\n  */\\n  uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum fee rate as a percentage out of 1000000000\\n  */\\n  uint256 public constant MAX_FEE = 1000000000;\\n\\n  /** \\n    @notice\\n    Maximum discount on fee granted by a gauge.\\n  */\\n  uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\\n}\\n\",\"keccak256\":\"0xc673508855053695e9d1310cb259b2de0910058d3eeab98137a4550ca75f7383\",\"license\":\"MIT\"},\"contracts/libraries/JBCurrencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBCurrencies {\\n  uint256 public constant ETH = 1;\\n  uint256 public constant USD = 2;\\n}\\n\",\"keccak256\":\"0x3077e365b09d45e3a82d6710bfda7323a0366c3cafc318ea9dc442a1a93036d7\",\"license\":\"MIT\"},\"contracts/libraries/JBFixedPointNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFixedPointNumber {\\n  function adjustDecimals(\\n    uint256 _value,\\n    uint256 _decimals,\\n    uint256 _targetDecimals\\n  ) internal pure returns (uint256) {\\n    // If decimals need adjusting, multiply or divide the price by the decimal adjuster to get the normalized result.\\n    if (_targetDecimals == _decimals) return _value;\\n    else if (_targetDecimals > _decimals) return _value * 10**(_targetDecimals - _decimals);\\n    else return _value / 10**(_decimals - _targetDecimals);\\n  }\\n}\\n\",\"keccak256\":\"0x279117420e7b46f973cae89bdb3806d9cc1c13790a568c7e3876bf78e6777080\",\"license\":\"MIT\"},\"contracts/libraries/JBFundingCycleMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBConstants.sol';\\nimport './../interfaces/IJBFundingCycleStore.sol';\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\nimport './../structs/JBFundingCycleMetadata.sol';\\n\\nlibrary JBFundingCycleMetadataResolver {\\n  function reservedRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    return uint256(uint16(_fundingCycle.metadata >> 8));\\n  }\\n\\n  function redemptionRate(JBFundingCycle memory _fundingCycle) internal pure returns (uint256) {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 24));\\n  }\\n\\n  function ballotRedemptionRate(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Redemption rate is a number 0-10000. It's inverse was stored so the most common case of 100% results in no storage needs.\\n    return JBConstants.MAX_REDEMPTION_RATE - uint256(uint16(_fundingCycle.metadata >> 40));\\n  }\\n\\n  function payPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 56) & 1) == 1;\\n  }\\n\\n  function distributionsPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 57) & 1) == 1;\\n  }\\n\\n  function redeemPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 58) & 1) == 1;\\n  }\\n\\n  function mintPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 59) & 1) == 1;\\n  }\\n\\n  function burnPaused(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 60) & 1) == 1;\\n  }\\n\\n  function changeTokenAllowed(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 61) & 1) == 1;\\n  }\\n\\n  function terminalMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 62) & 1) == 1;\\n  }\\n\\n  function controllerMigrationAllowed(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 63) & 1) == 1;\\n  }\\n\\n  function shouldHoldFees(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return ((_fundingCycle.metadata >> 64) & 1) == 1;\\n  }\\n\\n  function shouldUseLocalBalanceForRedemptions(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return ((_fundingCycle.metadata >> 65) & 1) == 1;\\n  }\\n\\n  function useDataSourceForPay(JBFundingCycle memory _fundingCycle) internal pure returns (bool) {\\n    return (_fundingCycle.metadata >> 66) & 1 == 1;\\n  }\\n\\n  function useDataSourceForRedeem(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (_fundingCycle.metadata >> 67) & 1 == 1;\\n  }\\n\\n  function dataSource(JBFundingCycle memory _fundingCycle)\\n    internal\\n    pure\\n    returns (IJBFundingCycleDataSource)\\n  {\\n    return IJBFundingCycleDataSource(address(uint160(_fundingCycle.metadata >> 68)));\\n  }\\n\\n  /**\\n    @notice\\n    Pack the funding cycle metadata.\\n\\n    @param _metadata The metadata to validate and pack.\\n\\n    @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\\n  */\\n  function packFundingCycleMetadata(JBFundingCycleMetadata memory _metadata)\\n    internal\\n    pure\\n    returns (uint256 packed)\\n  {\\n    // version 1 in the bits 0-7 (8 bits).\\n    packed = 1;\\n    // reserved rate in bits 8-23 (16 bits).\\n    packed |= _metadata.reservedRate << 8;\\n    // redemption rate in bits 24-39 (16 bits).\\n    // redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.redemptionRate) << 24;\\n    // ballot redemption rate rate in bits 40-55 (16 bits).\\n    // ballot redemption rate is a number 0-10000. Store the reverse so the most common case of 100% results in no storage needs.\\n    packed |= (JBConstants.MAX_REDEMPTION_RATE - _metadata.ballotRedemptionRate) << 40;\\n    // pause pay in bit 56.\\n    if (_metadata.pausePay) packed |= 1 << 56;\\n    // pause tap in bit 57.\\n    if (_metadata.pauseDistributions) packed |= 1 << 57;\\n    // pause redeem in bit 58.\\n    if (_metadata.pauseRedeem) packed |= 1 << 58;\\n    // pause mint in bit 59.\\n    if (_metadata.pauseMint) packed |= 1 << 59;\\n    // pause mint in bit 60.\\n    if (_metadata.pauseBurn) packed |= 1 << 60;\\n    // pause change token in bit 61.\\n    if (_metadata.allowChangeToken) packed |= 1 << 61;\\n    // allow terminal migration in bit 62.\\n    if (_metadata.allowTerminalMigration) packed |= 1 << 62;\\n    // allow controller migration in bit 63.\\n    if (_metadata.allowControllerMigration) packed |= 1 << 63;\\n    // hold fees in bit 64.\\n    if (_metadata.holdFees) packed |= 1 << 64;\\n    // useLocalBalanceForRedemptions in bit 65.\\n    if (_metadata.useLocalBalanceForRedemptions) packed |= 1 << 65;\\n    // use pay data source in bit 66.\\n    if (_metadata.useDataSourceForPay) packed |= 1 << 66;\\n    // use redeem data source in bit 67.\\n    if (_metadata.useDataSourceForRedeem) packed |= 1 << 67;\\n    // data source address in bits 68-227.\\n    packed |= uint256(uint160(address(_metadata.dataSource))) << 68;\\n  }\\n}\\n\",\"keccak256\":\"0x454ada2c970e4270ef05ac18d06d751eef8cc6d65432b932683a50c708f26eba\",\"license\":\"MIT\"},\"contracts/libraries/JBOperations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBOperations {\\n  uint256 public constant RECONFIGURE = 1;\\n  uint256 public constant REDEEM = 2;\\n  uint256 public constant MIGRATE_CONTROLLER = 3;\\n  uint256 public constant MIGRATE_TERMINAL = 4;\\n  uint256 public constant PROCESS_FEES = 5;\\n  uint256 public constant SET_METADATA = 6;\\n  uint256 public constant ISSUE = 7;\\n  uint256 public constant CHANGE_TOKEN = 8;\\n  uint256 public constant MINT = 9;\\n  uint256 public constant BURN = 10;\\n  uint256 public constant TRANSFER = 11;\\n  uint256 public constant REQUIRE_CLAIM = 12;\\n  uint256 public constant SET_CONTROLLER = 13;\\n  uint256 public constant ADD_TERMINALS = 14;\\n  uint256 public constant REMOVE_TERMINAL = 15;\\n  uint256 public constant SET_PRIMARY_TERMINAL = 16;\\n  uint256 public constant USE_ALLOWANCE = 17;\\n  uint256 public constant SET_SPLITS = 18;\\n}\\n\",\"keccak256\":\"0x585c8deb3bf2bc3fba0a3ca3b8d2b93e17915805b0ce3685641307db121fba1e\",\"license\":\"MIT\"},\"contracts/libraries/JBSplitsGroups.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBSplitsGroups {\\n  uint256 public constant ETH_PAYOUT = 1;\\n  uint256 public constant RESERVED_TOKENS = 2;\\n}\\n\",\"keccak256\":\"0x855a78b0411f3b0a0e2d96009e0f910a971d0175d18cbcac9eab1541c8968288\",\"license\":\"MIT\"},\"contracts/libraries/JBTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary JBTokens {\\n  /** \\n    @notice \\n    The ETH token address in Juicebox is represented by 0x000000000000000000000000000000000000EEEe.\\n  */\\n  address public constant ETH = address(0x000000000000000000000000000000000000EEEe);\\n}\\n\",\"keccak256\":\"0x8531a1a36ca119b805a011f230ee9bdeb1036c82d8fd69fc5d4503da6daace51\",\"license\":\"MIT\"},\"contracts/structs/JBDidPayData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidPayData {\\n  // The address from which the payment originated.\\n  address payer;\\n  // The ID of the project for which the payment was made.\\n  uint256 projectId;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The number of project tokens minted for the beneficiary.\\n  uint256 projectTokenCount;\\n  // The address to which the tokens were minted.\\n  address beneficiary;\\n  // The memo that is being emitted alongside the payment.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xc9854f845a2aca0953e1c850d40fa8c930638e1e0ebfaea103c93c8500150bbb\",\"license\":\"MIT\"},\"contracts/structs/JBDidRedeemData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBDidRedeemData {\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The project to which the redeemed tokens are associated.\\n  uint256 projectId;\\n  // The number of project tokens being redeemed.\\n  uint256 projectTokenCount;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount reclaimedAmount;\\n  // The address to which the ETH will be sent.\\n  address payable beneficiary;\\n  // The memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Metadata to send to the delegate.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x9e656b4698364f127d0bd9e7e5f249de053e193d2db73de2fb8cec503a837024\",\"license\":\"MIT\"},\"contracts/structs/JBFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBFee {\\n  // The total amount the fee was taken from.\\n  uint256 amount;\\n  // The percent of the fee.\\n  uint32 fee;\\n  // The address that will receive the tokens that are minted as a result of the fee payment.\\n  address beneficiary;\\n}\\n\",\"keccak256\":\"0x446dcda8af736a8fd23506ec50db38dcf1ec89c905146a74d91bb609c4c6105c\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycle {\\n  // The funding cycle number for each project.\\n  // Each funding cycle has a number that is an increment of the cycle that directly preceded it.\\n  // Each project's first funding cycle has a number of 1.\\n  uint256 number;\\n  // The timestamp when the parameters for this funding cycle were configured.\\n  // This value will stay the same for subsequent funding cycles that roll over from an originally configured cycle.\\n  uint256 configuration;\\n  // The `configuration` of the funding cycle with a `number` one less than this cycle's `number`.\\n  uint256 basedOn;\\n  // The timestamp marking the moment from which the funding cycle is considered active.\\n  // It is a unix timestamp measured in seconds.\\n  uint256 start;\\n  // The number of seconds the funding cycle lasts for, after which a new funding cycle will start.\\n  // A duration of 0 means that the funding cycle will stay active until the project owner explicitly issues a reconfiguration, at which point a new funding cycle will be triggered with the updated properties.\\n  // If the duration is greater than 0, a project owner cannot make changes to a funding cycle's parameters while it is active \\u2013 any proposed changes will apply to the subsequent cycle.\\n  // If no changes are proposed, a funding cycle rolls over to another one with the same properties but new `start` timestamp and a discounted `weight`.\\n  uint256 duration;\\n  // An unsigned 60.18-decimal fixed-point number that contracts can use to base arbitrary calculations on.\\n  // For example, the `JBETHPaymentTerminalStore` uses this to determine how many tokens it should mint when a payment is received.\\n  uint256 weight;\\n  // A number from 0-1000000000 indicating by how much the `weight` of the subsequent funding cycle should be reduced, if the project owner hasn't configured the subsequent funding cycle with an explicit `weight`.\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, the next funding cycle will have a 10% smaller weight.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  // It can be used to create rules around how a project owner can change funding cycle parameters over time.\\n  IJBFundingCycleBallot ballot;\\n  // Extra data that can be associated with a funding cycle.\\n  uint256 metadata;\\n}\\n\",\"keccak256\":\"0x8ff64289216ea89220cc828df7d0ca1a363286c71a158faddd1b3161958b190e\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleBallot.sol';\\n\\nstruct JBFundingCycleData {\\n  // The duration of the funding cycle in days.\\n  // A duration of 0 is no duration, meaning projects can trigger a new funding cycle on demand by issueing a reconfiguration.\\n  uint256 duration;\\n  // The weight of the funding cycle.\\n  // This number is interpreted as a wad, meaning it has 18 decimal places.\\n  // The protocol uses the weight to determine how many tokens to mint upon receiving a payment during a funding cycle.\\n  // A value of 0 means that the weight should be inherited and potentially discounted from the currently active cycle if possible. Otherwise a weight of 0 will be used.\\n  // A value of 1 means that no tokens should be minted regardless of how many ETH was paid. The protocol will set the stored weight value to 0.\\n  // A value of 1 X 10^18 means that one token should be minted per ETH received.\\n  uint256 weight;\\n  // If it's 0, each funding cycle will have equal weight.\\n  // If the number is 900000000, a contribution to the next funding cycle will only give you 10% of tickets given to a contribution of the same amoutn during the current funding cycle.\\n  uint256 discountRate;\\n  // An address of a contract that says whether a proposed reconfiguration should be accepted or rejected.\\n  IJBFundingCycleBallot ballot;\\n}\\n\",\"keccak256\":\"0xc68e73a33a605bab8bd4fa260833e7ba3b539f90e96f43b4851a33e53811eb2d\",\"license\":\"MIT\"},\"contracts/structs/JBFundingCycleMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBFundingCycleDataSource.sol';\\n\\nstruct JBFundingCycleMetadata {\\n  // The reserved rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 reservedRate;\\n  // The redemption rate of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 redemptionRate;\\n  // The redemption rate to use during an active ballot of the funding cycle. This number is a percentage calculated out of 10000.\\n  uint256 ballotRedemptionRate;\\n  // If the pay functionality should be paused during the funding cycle.\\n  bool pausePay;\\n  // If the distribute functionality should be paused during the funding cycle.\\n  bool pauseDistributions;\\n  // If the redeem functionality should be paused during the funding cycle.\\n  bool pauseRedeem;\\n  // If the mint functionality should be paused during the funding cycle.\\n  bool pauseMint;\\n  // If the burn functionality should be paused during the funding cycle.\\n  bool pauseBurn;\\n  // If changing tokens should be allowed during this funding cycle.\\n  bool allowChangeToken;\\n  // If migrating terminals should be allowed during this funding cycle.\\n  bool allowTerminalMigration;\\n  // If migrating controllers should be allowed during this funding cycle.\\n  bool allowControllerMigration;\\n  // If fees should be held during this funding cycle.\\n  bool holdFees;\\n  // If redemptions should use the project's local terminal balance instead of the project's balance held in all terminals.\\n  bool useLocalBalanceForRedemptions;\\n  // If the data source should be used for pay transactions during this funding cycle.\\n  bool useDataSourceForPay;\\n  // If the data source should be used for redeem transactions during this funding cycle.\\n  bool useDataSourceForRedeem;\\n  // The data source to use during this funding cycle.\\n  IJBFundingCycleDataSource dataSource;\\n}\\n\",\"keccak256\":\"0x63043118e450fc2ef17ca0f772afcf3016104ade23fa84fff788a74821a72186\",\"license\":\"MIT\"},\"contracts/structs/JBOperatorData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBOperatorData {\\n  // The address of the operator.\\n  address operator;\\n  // The domain within which the operator is being given permissions.\\n  uint256 domain;\\n  // The indexes of the permissions the operator is being given.\\n  uint256[] permissionIndexes;\\n}\\n\",\"keccak256\":\"0x25a5007c18c3c057615869124af6b0e9cdfbd64fd8d2d7a17f428d6eea5a4835\",\"license\":\"MIT\"},\"contracts/structs/JBPayParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nimport './JBTokenAmount.sol';\\n\\nstruct JBPayParamsData {\\n  // The terminal that is facilitating the payment.\\n  IJBPaymentTerminal terminal;\\n  // The address from which the payment originated.\\n  address payer;\\n  // The amount of the payment. Includes the token being paid, the value, the number of decimals included, and the currency of the amount.\\n  JBTokenAmount amount;\\n  // The ID of the project being paid.\\n  uint256 projectId;\\n  // The weight of the funding cycle during which the payment is being made.\\n  uint256 weight;\\n  // The reserved rate of the funding cycle during which the payment is being made.\\n  uint256 reservedRate;\\n  // The proposed beneficiary of the tokens that will be minted as a result of the tokens.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the payment.\\n  string memo;\\n  // Arbitrary metadata provided by the payer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0x2deef9bad4e9786248e64572aebff17a1ed621e89d7f592fa1964d4f5dcea543\",\"license\":\"MIT\"},\"contracts/structs/JBProjectMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBProjectMetadata {\\n  // Metadata content.\\n  string content;\\n  // The domain within which the metadata applies.\\n  uint256 domain;\\n}\\n\",\"keccak256\":\"0xc3b76e617b453c6dc60cc8bd3683ff7726f1a967b28fb8e760b1d16f52c07d17\",\"license\":\"MIT\"},\"contracts/structs/JBRedeemParamsData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBPaymentTerminal.sol';\\n\\nstruct JBRedeemParamsData {\\n  // The terminal that is facilitating the redemption.\\n  IJBPaymentTerminal terminal;\\n  // The holder of the tokens being redeemed.\\n  address holder;\\n  // The proposed number of tokens being redeemed.\\n  uint256 tokenCount;\\n  // The number of decimals included in the `reclaimAmount` fixed point number that should be returned.\\n  uint256 decimals;\\n  // The ID of the project whos tokens are being redeemed.\\n  uint256 projectId;\\n  // The redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 redemptionRate;\\n  // The ballot redemption rate of the funding cycle during which the redemption is being made.\\n  uint256 ballotRedemptionRate;\\n  // The currency that the stored balance is expected to be in terms of.\\n  uint256 currency;\\n  // The proposed beneficiary of the ETH being claimed by making the redemption.\\n  address beneficiary;\\n  // The proposed memo that is being emitted alongside the redemption.\\n  string memo;\\n  // Arbitrary metadata provided by the redeemer.\\n  bytes metadata;\\n}\\n\",\"keccak256\":\"0xd6e6a992369de9f53f1a09bf93dfc6b80db9d1c7edc21bd1e809feb63a9d4f54\",\"license\":\"MIT\"},\"contracts/structs/JBSplit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './../interfaces/IJBSplitAllocator.sol';\\n\\nstruct JBSplit {\\n  // A flag that only has effect if a projectId is also specified, and that project has issued its tokens.\\n  // If so, this flag indicates if the tokens that result from making a payment to the project should be delivered staked or unstaked to the beneficiary.\\n  bool preferClaimed;\\n  // The percent of the whole group that this split occupies. This number is out of 1000000000.\\n  uint256 percent;\\n  // If an allocator is not set but a projectId is set, funds will be sent to the Juicebox treasury belonging to the project who's ID is specified.\\n  // Resulting tokens will be routed to the beneficiary with the unstaked token preference respected.\\n  uint256 projectId;\\n  // The role the  beneficary depends on whether or not projectId is specified, or whether or not allocator is specified.\\n  // If allocator is set, the beneficiary will be forwarded to the allocator for it to use.\\n  // If allocator is not set but projectId is set, the beneficiary is the address to which the project's tokens will be sent that result from a payment to it.\\n  // If neither allocator or projectId are set, the beneficiary is where the funds from the split will be sent.\\n  address payable beneficiary;\\n  // Specifies if the split should be unchangeable until the specifies time comes, with the exception of extending the lockedUntil period.\\n  uint256 lockedUntil;\\n  // If an allocator is specified, funds will be sent to the allocator contract along with the projectId, beneficiary, preferClaimed properties.\\n  IJBSplitAllocator allocator;\\n}\\n\",\"keccak256\":\"0xbf9548ed07950457a334c38a74d2bf66fedd248f755634e01ba4b95d8711dcd7\",\"license\":\"MIT\"},\"contracts/structs/JBTokenAmount.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nstruct JBTokenAmount {\\n  // The token the payment was made in.\\n  address token;\\n  // The amount of tokens that was paid, as a fixed point number.\\n  uint256 value;\\n  // The number of decimals included in th `amount` fixed point number.\\n  uint256 decimals;\\n  // The expected currency index of the value in reference to JBPRices feeds.\\n  uint256 currency;\\n}\\n\",\"keccak256\":\"0x0eb6f20e710d678740adc9c566bf9d861239f2d6b93ad78dc42ec55791995a3b\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the closest power of two that is higher than x.\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x62cbabae4910e168e99b9c2c3e3b5c9c7ad5e7abd961dcc63b7ea3d83d8ea87e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6101e060405263017d78406003553480156200001a57600080fd5b506040516200607a3803806200607a8339810160408190526200003d916200020d565b606087901b6001600160601b03191660805261eeee601260018a818b8b8b8b8b8b8b6200006a33620000e8565b600180556001600160601b031960608d811b8216610140526101608d90526101a08b90526101c08a90526101808c905287811b821660a05286811b821660c05285811b821660e05284811b82166101005283901b1661012052620000ce8162000138565b5050505050505050505050505050505050505050620002d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200018f565b6200020a81620000e8565b50565b600080600080600080600080610100898b0312156200022b57600080fd5b8851975060208901516200023f81620002c2565b60408a01519097506200025281620002c2565b60608a01519096506200026581620002c2565b60808a01519095506200027881620002c2565b60a08a01519094506200028b81620002c2565b60c08a01519093506200029e81620002c2565b60e08a0151909250620002b181620002c2565b809150509295985092959890939650565b6001600160a01b03811681146200020a57600080fd5b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c61016051610180516101a0516101c051615b706200050a6000396000818161032f01528181613e59015261404701526000818161025901526139f80152600081816105dd0152818161116f01528181611fa8015281816120230152818161272f01528181612a5d01528181612c8a015261399201526000818161029b01528181611f4901528181611f7501528181611fd5015281816120500152818161270e01528181612a37015261396c01526000818161067101528181610b7b01528181610cb6015281816117dc01528181612284015281816129f5015281816130af015281816136210152818161371c0152818161392a01528181613fda0152818161413a01526142f001526000818161045701528181610c19015281816111af01528181611ec9015281816126cf01528181612cb5015281816133f401526139b801526000818161054601526120760152600081816101fb0152613e8601526000818161051201528181611715015281816121bd01528181612861015281816130dc0152818161364c01528181613aee015261410d0152600081816103f80152818161084a01528181610e97015281816112b3015281816118a90152612db70152600081816104be0152818161095601528181610a3201528181610fa30152818161107f01528181611a0c01528181611ae80152818161248a01526125660152615b706000f3fe6080604052600436106101c25760003560e01c80638da5cb5b116100f7578063d3419bf311610095578063e5a6b10f11610064578063e5a6b10f146105cb578063e730b26e146105ff578063f2fde38b1461063f578063fc0c546a1461065f57600080fd5b8063d3419bf314610534578063d6dacc5314610568578063d930c60c14610595578063ddca3f43146105b557600080fd5b8063abe151b7116100d1578063abe151b714610499578063ad007d63146104ac578063b6cf978e146104e0578063c41c2f241461050057600080fd5b80638da5cb5b1461041a578063975057e714610445578063a32e1e961461047957600080fd5b806366248b861161016457806384a2aacd1161013e57806384a2aacd1461038657806389701db5146103995780638af56094146103b95780638b79543c146103e657600080fd5b806366248b861461031d57806369fe0e2d14610351578063715018a61461037157600080fd5b8063313ce567116101a0578063313ce56714610289578063405b84fa146102bd5780634ee9c559146102dd578063637913ac146102fd57600080fd5b806317b75e32146101c75780632bdfe004146101e95780632d1a590314610247575b600080fd5b3480156101d357600080fd5b506101e76101e2366004614b58565b610693565b005b3480156101f557600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561025357600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161023e565b34801561029557600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c957600080fd5b506101e76102d8366004614e6a565b6107a9565b3480156102e957600080fd5b506101e76102f8366004614f9e565b610df6565b34801561030957600080fd5b506101e7610318366004614b58565b6113ed565b34801561032957600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035d57600080fd5b506101e761036c366004614e38565b6114e6565b34801561037d57600080fd5b506101e76115df565b6101e7610394366004614f4e565b61166c565b3480156103a557600080fd5b506101e76103b4366004614e38565b61187a565b3480156103c557600080fd5b506103d96103d4366004614e38565b611dcf565b60405161023e91906154fc565b3480156103f257600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561042657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661021d565b34801561045157600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561048557600080fd5b5061027b610494366004614e38565b611e7a565b6101e76104a7366004614e9a565b612114565b3480156104b857600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ec57600080fd5b5061027b6104fb366004614b92565b612396565b34801561050c57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561054057600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561057457600080fd5b5060045461021d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105a157600080fd5b506101e76105b0366004615013565b612bdb565b3480156105c157600080fd5b5061027b60035481565b3480156105d757600080fd5b5061027b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561060b57600080fd5b5061062f61061a366004614b58565b60056020526000908152604090205460ff1681565b604051901515815260200161023e565b34801561064b57600080fd5b506101e761065a366004614b58565b612f3b565b34801561066b57600080fd5b5061021d7f000000000000000000000000000000000000000000000000000000000000000081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600081815260056020908152604091829020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116179055815192835233908301527f05b017efe9d7a83c590ba54f56097c54c7bbb3aff8d163cff5bbb80f9cf9573d91015b60405180910390a150565b60026001541415610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b1580156108a157600080fd5b505afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190614b75565b8260043373ffffffffffffffffffffffffffffffffffffffff8416148015906109d257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b15801561099857600080fd5b505afa1580156109ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d09190614d5f565b155b8015610aae57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190614d5f565b155b15610ae5576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b2b57600080fd5b505afa158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b639190614b75565b73ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610be7576040517f581010ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6bb6a5ad000000000000000000000000000000000000000000000000000000008152600481018690526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636bb6a5ad90602401602060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190614e51565b90508015610d985760007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee14610cfa576000610cfc565b815b6040517f84a2aacd0000000000000000000000000000000000000000000000000000000081526004810184905260248101899052606060448201526000606482015290915073ffffffffffffffffffffffffffffffffffffffff8716906384a2aacd9083906084016000604051808303818588803b158015610d7d57600080fd5b505af1158015610d91573d6000803e3d6000fd5b5050505050505b6040805182815233602082015273ffffffffffffffffffffffffffffffffffffffff87169188917fa7519e5f94697b7f53e97c5eb46a0c730a296ab686ab8fd333835c5f735784eb910160405180910390a350506001805550505050565b60026001541415610e63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001556040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015610eee57600080fd5b505afa158015610f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f269190614b75565b8660113373ffffffffffffffffffffffffffffffffffffffff84161480159061101f57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d9190614d5f565b155b80156110fb57506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156110c157600080fd5b505afa1580156110d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f99190614d5f565b155b15611132576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f1837d6e3000000000000000000000000000000000000000000000000000000008152600481018a905260248101899052604481018890527f00000000000000000000000000000000000000000000000000000000000000006064820152600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690631837d6e39060840161014060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122c9190614d99565b915091508781101561126a576040517fb01493c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018c9052600090819073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e9060240160206040518083038186803b1580156112f557600080fd5b505afa158015611309573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132d9190614b75565b9050600061133a8e61306b565b9050600354600014806113505750633b9aca0081145b611366576113618e8686858561325a565b611369565b60005b925050506000818361137b91906159d2565b9050801561138e5761138e308a8361333a565b508b836000015184602001517f8657a0c05a68a912c23c1bd00124afaa8c669063b046bd9bfd22b21d573c5e6d8b8f87878e336040516113d39695949392919061528d565b60405180910390a450506001805550505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610710565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604080519182523360208301527f0a9a80fe9716605b3e52abb3d792d6a4e7816d6afc02a5a4ef023081feaf9f60910161079e565b60005473ffffffffffffffffffffffffffffffffffffffff163314611567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610710565b6302faf0808111156115a5576040517f45fbd9c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003819055604080518281523360208201527fd7414e590e1cb532989ab2a34c8f4c2c17f7ab6f006efeeaef2e87cd5008c202910161079e565b60005473ffffffffffffffffffffffffffffffffffffffff163314611660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610710565b61166a6000613349565b565b600260015414156116d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001556040517f6e49181f0000000000000000000000000000000000000000000000000000000081526004810183905230602482015282907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636e49181f9060440160206040518083038186803b15801561176c57600080fd5b505afa158015611780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a49190614d5f565b6117da576040517fd8ead2c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee14611861573415611851576040517fbcfd35be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61185c33308661333a565b611865565b3493505b6118708484846133be565b5050600180555050565b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b15801561190057600080fd5b505afa158015611914573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119389190614b75565b81600561195a60005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614801580156119ac57503373ffffffffffffffffffffffffffffffffffffffff851614155b8015611a8857506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260448201859052606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611a4e57600080fd5b505afa158015611a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a869190614d5f565b155b8015611b6457506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff858116602483015260006044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b158015611b2a57600080fd5b505afa158015611b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b629190614d5f565b155b15611b9b576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026001541415611c08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b600260018190556000868152602091825260408082208054825181860281018601909352808352929391929091849084015b82821015611ca557600084815260209081902060408051606081018252600286029092018054835260019081015463ffffffff811684860152640100000000900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101611c3a565b50505050905060005b8151811015611d7157611d5f611d14838381518110611ccf57611ccf615aac565b602002602001015160000151633b9aca0080868681518110611cf357611cf3615aac565b60200260200101516020015163ffffffff16611d0f919061581b565b6134d2565b838381518110611d2657611d26615aac565b602002602001015160000151611d3c91906159d2565b838381518110611d4e57611d4e615aac565b6020026020010151604001516135dd565b80611d6981615a15565b915050611cae565b506000868152600260205260408120611d8991614982565b857f8d2ea94fb29422091b5a6b535e295fa8674108fb2f7ac5a386627ae17579e0008233604051611dbb92919061550f565b60405180910390a250506001805550505050565b606060026000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611e6f57600084815260209081902060408051606081018252600286029092018054835260019081015463ffffffff811684860152640100000000900473ffffffffffffffffffffffffffffffffffffffff16918301919091529083529092019101611e04565b505050509050919050565b6040517fd49031c000000000000000000000000000000000000000000000000000000000815230600482015260248101829052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063d49031c09060440160206040518083038186803b158015611f0b57600080fd5b505afa158015611f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f439190614e51565b905060007f0000000000000000000000000000000000000000000000000000000000000000601214611fa057611f9b827f00000000000000000000000000000000000000000000000000000000000000006012613807565b611fa2565b815b905060017f00000000000000000000000000000000000000000000000000000000000000001461210a5761210581611ffb7f0000000000000000000000000000000000000000000000000000000000000000600a6158cf565b6040517fa4d0caf20000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006004820152600160248201527f000000000000000000000000000000000000000000000000000000000000000060448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a4d0caf29060640160206040518083038186803b1580156120cd57600080fd5b505afa1580156120e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f9190614e51565b61210c565b805b949350505050565b60026001541415612181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001556040517f6e49181f0000000000000000000000000000000000000000000000000000000081526004810189905230602482015288907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636e49181f9060440160206040518083038186803b15801561221457600080fd5b505afa158015612228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224c9190614d5f565b612282576040517fd8ead2c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee146123095734156122f9576040517fbcfd35be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61230433308c61333a565b61230d565b3499505b6123868a338b8b8b8b8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525061386592505050565b5050600180555050505050505050565b600060026001541415612405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001819055889088903373ffffffffffffffffffffffffffffffffffffffff84161480159061250657506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260448201849052606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156124cc57600080fd5b505afa1580156124e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125049190614d5f565b155b80156125e257506040517fc161c93f00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015260006044830152606482018390527f0000000000000000000000000000000000000000000000000000000000000000169063c161c93f9060840160206040518083038186803b1580156125a857600080fd5b505afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190614d5f565b155b15612619576040517f075fd2b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716612666576040517ff74a1b6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6126cb60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634a35c01c8e8e8e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008f8f8f6040518963ffffffff1660e01b8152600401612774989796959493929190615487565b600060405180830381600087803b15801561278e57600080fd5b505af11580156127a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526127e89190810190614dc8565b9a5090975090925090508986101561282c576040517ff896960b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8a15612997576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018d90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b1580156128b857600080fd5b505afa1580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f09190614b75565b6040517f1665bc0f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f81166004830152602482018f9052604482018e905260a06064830152600060a4830181905260848301529190911690631665bc0f9060c401600060405180830381600087803b15801561297e57600080fd5b505af1158015612992573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff811615612b695760006040518060e001604052808f73ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020018d815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018981525090508173ffffffffffffffffffffffffffffffffffffffff166343e1db27826040518263ffffffff1660e01b8152600401612ae5919061556d565b600060405180830381600087803b158015612aff57600080fd5b505af1158015612b13573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167fae50d9bddbe6ac4bc3773182fa294bce3492ee93a9d32ae21ad4f6ebb618c7f98233604051612b5f929190615580565b60405180910390a2505b508415612b7b57612b7b30898761333a565b8a816000015182602001517fd2b8b011245528ed3c6d92b102e0cd9895bb1910613b04dd42d7c9ac3781612d8f8c8f8b8e33604051612bbf96959493929190615344565b60405180910390a4505060018055509098975050505050505050565b60026001541415612c48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610710565b60026001556040517f4d9cd5ac0000000000000000000000000000000000000000000000000000000081526004810186905260248101859052604481018490527f0000000000000000000000000000000000000000000000000000000000000000606482015260009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634d9cd5ac9060840161014060405180830381600087803b158015612d0f57600080fd5b505af1158015612d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d479190614d99565b9150915083811015612d85576040517fb01493c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018890526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e9060240160206040518083038186803b158015612e0e57600080fd5b505afa158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e469190614b75565b90506000806000600354600014612e6557612e608b61306b565b612e6b565b633b9aca005b90506000612e7b8c888885613e1d565b9093509050612e8a838261581b565b9050633b9aca00821480612e9c575080155b612eb257612ead8c8883888661325a565b612eb5565b60005b93508215612edb57612edb3086612ecc86866144db565b612ed690876159d2565b61333a565b505089856000015186602001517f24352f49df447b14e0e08a323625c663d865ce20c343c4638af12e1dc48aa760868d8988888e33604051612f2397969594939291906152e5565b60405180910390a45050600180555050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612fbc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610710565b73ffffffffffffffffffffffffffffffffffffffff811661305f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610710565b61306881613349565b50565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063862026509060440160206040518083038186803b15801561311e57600080fd5b505afa158015613132573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131569190614b75565b73ffffffffffffffffffffffffffffffffffffffff16141561317d5750633b9aca00919050565b60045473ffffffffffffffffffffffffffffffffffffffff161561324057600480546040517f7769589600000000000000000000000000000000000000000000000000000000815291820184905273ffffffffffffffffffffffffffffffffffffffff169063776958969060240160206040518083038186803b15801561320357600080fd5b505afa158015613217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323b9190614e51565b613243565b60005b9050633b9aca00811115613255575060005b919050565b600061326684836144db565b61010086015190915060401c60019081161461328b5761328681846135dd565b613331565b6000868152600260208181526040808420815160608101835289815260035463ffffffff90811682860190815273ffffffffffffffffffffffffffffffffffffffff808c16958401958652845460018181018755958a52969098209251959096029091019384559351920180549151909416640100000000027fffffffffffffffff00000000000000000000000000000000000000000000000090911691909216171790555b95945050505050565b6133448282614525565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517fe7c8e3e300000000000000000000000000000000000000000000000000000000815260048101839052602481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e7c8e3e39060440161012060405180830381600087803b15801561344e57600080fd5b505af1158015613462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134869190614d7c565b50613491828461467f565b817f4ce42b42caaa564737146f357a8fa7fe24940fac843d392a69e23b32a1d766a38483336040516134c59392919061561f565b60405180910390a2505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561352b5783828161352157613521615a7d565b04925050506135d6565b83811061356e576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610710565b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6040517f862026500000000000000000000000000000000000000000000000000000000081526001600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063862026509060440160206040518083038186803b15801561369057600080fd5b505afa1580156136a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c89190614b75565b905073ffffffffffffffffffffffffffffffffffffffff81163014156137185761334483306001856000806040518060200160405280600081525060405180602001604052806000815250613865565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee14613760576000613762565b835b60408051602081018252600080825291517fabe151b700000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff85169263abe151b79285926137cf928a926001928b9282919060040161565e565b6000604051808303818588803b1580156137e857600080fd5b505af11580156137fc573d6000803e3d6000fd5b505050505050505050565b6000828214156138185750826135d6565b828211156138465761382a83836159d2565b61383590600a6158cf565b61383f9085615995565b90506135d6565b61385082846159d2565b61385b90600a6158cf565b61383f9085615833565b73ffffffffffffffffffffffffffffffffffffffff85166138b2576040517fa762251300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61391760405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b60008060008060405180608001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018e81526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638910c7da8d838e8e7f00000000000000000000000000000000000000000000000000000000000000008d8d6040518863ffffffff1660e01b8152600401613a3b9796959493929190615388565b600060405180830381600087803b158015613a5557600080fd5b505af1158015613a69573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613aaf9190810190614dc8565b995091965090935091508115613c4e576040517f5dd8f6aa000000000000000000000000000000000000000000000000000000008152600481018c90527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690635dd8f6aa9060240160206040518083038186803b158015613b4557600080fd5b505afa158015613b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7d9190614b75565b6040517f8ae9c07b000000000000000000000000000000000000000000000000000000008152600481018d90526024810184905273ffffffffffffffffffffffffffffffffffffffff8c8116604483015260c06064830152600060c48301528a15156084830152600160a48301529190911690638ae9c07b9060e401602060405180830381600087803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4b9190614e51565b93505b88841015613c88576040517f7b94612600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831615613dc45760006040518060e001604052808e73ffffffffffffffffffffffffffffffffffffffff1681526020018d81526020018381526020018681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881525090508373ffffffffffffffffffffffffffffffffffffffff1663185856a1826040518263ffffffff1660e01b8152600401613d409190615547565b600060405180830381600087803b158015613d5a57600080fd5b505af1158015613d6e573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff167f7c66059d4a9f68466678168c1c369a1532ce0c8cec8da9b0a40703d29ff1c7b38233604051613dba92919061555a565b60405180910390a2505b50505087826000015183602001517f90a505d9899718702d1f8f9a21ba0bb545df8f5f70efdc5cd51b534191a304af8a8e868a33604051613e09959493929190615436565b60405180910390a450505050505050505050565b60208301516040517f69e11cc50000000000000000000000000000000000000000000000000000000081526004810186905260248101919091527f00000000000000000000000000000000000000000000000000000000000000006044820152829060009081907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906369e11cc59060640160006040518083038186803b158015613edd57600080fd5b505afa158015613ef1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613f379190810190614c4c565b905060005b81518110156144d0576000828281518110613f5957613f59615aac565b602002602001015190506000613f78888360200151633b9aca006134d2565b9050600081156144745760a083015173ffffffffffffffffffffffffffffffffffffffff16156140be57633b9aca008814613fc657613fb782896144db565b613fc190836159d2565b613fc8565b815b9050613fd4828761581b565b955060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee1461401e576000614020565b815b90508360a0015173ffffffffffffffffffffffffffffffffffffffff1663550b043282848f7f0000000000000000000000000000000000000000000000000000000000000000896040518663ffffffff1660e01b815260040161408694939291906156c3565b6000604051808303818588803b15801561409f57600080fd5b505af11580156140b3573d6000803e3d6000fd5b505050505050614467565b6040830151156143e45760408084015190517f8620265000000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691638620265091614181917f00000000000000000000000000000000000000000000000000000000000000009060040191825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60206040518083038186803b15801561419957600080fd5b505afa1580156141ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d19190614b75565b905073ffffffffffffffffffffffffffffffffffffffff8116614220576040517f6921234300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81163014156142815782915061427c823086604001518760600151600089600001516040518060200160405280600081525060405180602001604052806000815250613865565b6143de565b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460ff16156142b7578291506142ec565b633b9aca0089146142db576142cc838a6144db565b6142d690846159d2565b6142dd565b825b91506142e9838861581b565b96505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661eeee14614334576000614336565b825b604080870151606088015188518351602081018552600080825294517fabe151b700000000000000000000000000000000000000000000000000000000815295965073ffffffffffffffffffffffffffffffffffffffff88169563abe151b79588956143aa958c959194909360040161565e565b6000604051808303818588803b1580156143c357600080fd5b505af11580156143d7573d6000803e3d6000fd5b5050505050505b50614467565b633b9aca008814614408576143f982896144db565b61440390836159d2565b61440a565b815b9050614416828761581b565b955061446730600073ffffffffffffffffffffffffffffffffffffffff16856060015173ffffffffffffffffffffffffffffffffffffffff16141561445b5733614461565b84606001515b8361333a565b61447182886159d2565b96505b8a8a600001518b602001517fd5a0ea197eec97b08a67e43169564f3b9b9aaa22f7b3e1652c8e6417b7cf03168685336040516144b293929190615593565b60405180910390a450505080806144c890615a15565b915050613f3c565b505094509492505050565b6000806144ef60035484633b9aca006134d2565b6003546144fc91906159d2565b905061451184633b9aca00611d0f818561581b565b61451b90856159d2565b9150505b92915050565b8047101561458f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610710565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146145e9576040519150601f19603f3d011682016040523d82523d6000602084013e6145ee565b606091505b5050905080613344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610710565b600082815260026020908152604080832080548251818502810185019093528083529192909190849084015b8282101561471657600084815260209081902060408051606081018252600286029092018054835260019081015463ffffffff811684860152640100000000900473ffffffffffffffffffffffffffffffffffffffff169183019190915290835290920191016146ab565b5050506000858152600260205260408120929350614735929150614982565b60005b815181101561497c57826147f9576000848152600260205260409020825183908390811061476857614768615aac565b60209081029190910181015182546001818101855560009485529383902082516002909202019081559181015191909201805460409093015173ffffffffffffffffffffffffffffffffffffffff16640100000000027fffffffffffffffff00000000000000000000000000000000000000000000000090931663ffffffff9092169190911791909117905561496a565b81818151811061480b5761480b615aac565b602002602001015160000151831061484d5781818151811061482f5761482f615aac565b6020026020010151600001518361484691906159d2565b925061496a565b6002600085815260200190815260200160002060405180606001604052808585858151811061487e5761487e615aac565b60200260200101516000015161489491906159d2565b81526020018484815181106148ab576148ab615aac565b60200260200101516020015163ffffffff1681526020018484815181106148d4576148d4615aac565b60209081029190910181015160409081015173ffffffffffffffffffffffffffffffffffffffff9081169093528454600181810187556000968752838720865160029093020191825592850151920180549490910151909216640100000000027fffffffffffffffff00000000000000000000000000000000000000000000000090931663ffffffff9091161791909117905592505b8061497481615a15565b915050614738565b50505050565b508054600082556002029060005260206000209081019061306891905b808211156149dd57600081556001810180547fffffffffffffffff00000000000000000000000000000000000000000000000016905560020161499f565b5090565b60006149f46149ef846157d5565b615786565b9050828152838383011115614a0857600080fd5b828260208301376000602084830101529392505050565b60008083601f840112614a3157600080fd5b50813567ffffffffffffffff811115614a4957600080fd5b602083019150836020828501011115614a6157600080fd5b9250929050565b805161325581615b0a565b600082601f830112614a8457600080fd5b6135d6838335602085016149e1565b600082601f830112614aa457600080fd5b8151614ab26149ef826157d5565b818152846020838601011115614ac757600080fd5b61210c8260208301602087016159e9565b60006101208284031215614aeb57600080fd5b614af3615739565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c0820152614b4160e08301614a68565b60e082015261010080830151818301525092915050565b600060208284031215614b6a57600080fd5b81356135d681615b0a565b600060208284031215614b8757600080fd5b81516135d681615b0a565b600080600080600080600060e0888a031215614bad57600080fd5b8735614bb881615b0a565b96506020880135955060408801359450606088013593506080880135614bdd81615b0a565b925060a088013567ffffffffffffffff80821115614bfa57600080fd5b614c068b838c01614a73565b935060c08a0135915080821115614c1c57600080fd5b508801601f81018a13614c2e57600080fd5b614c3d8a8235602084016149e1565b91505092959891949750929550565b60006020808385031215614c5f57600080fd5b825167ffffffffffffffff80821115614c7757600080fd5b818501915085601f830112614c8b57600080fd5b815181811115614c9d57614c9d615adb565b614cab848260051b01615786565b818152848101925083850160c0808402860187018a1015614ccb57600080fd5b60009550855b84811015614d505781838c031215614ce7578687fd5b614cef615763565b8351614cfa81615b2c565b8152838901518982015260408085015190820152606080850151614d1d81615b0a565b908201526080848101519082015260a080850151614d3a81615b0a565b9082015286529487019491810191600101614cd1565b50919998505050505050505050565b600060208284031215614d7157600080fd5b81516135d681615b2c565b60006101208284031215614d8f57600080fd5b6135d68383614ad8565b6000806101408385031215614dad57600080fd5b614db78484614ad8565b915061012083015190509250929050565b6000806000806101808587031215614ddf57600080fd5b614de98686614ad8565b93506101208501519250610140850151614e0281615b0a565b61016086015190925067ffffffffffffffff811115614e2057600080fd5b614e2c87828801614a93565b91505092959194509250565b600060208284031215614e4a57600080fd5b5035919050565b600060208284031215614e6357600080fd5b5051919050565b60008060408385031215614e7d57600080fd5b823591506020830135614e8f81615b0a565b809150509250929050565b600080600080600080600080600060e08a8c031215614eb857600080fd5b8935985060208a0135975060408a0135614ed181615b0a565b965060608a0135955060808a0135614ee881615b2c565b945060a08a013567ffffffffffffffff80821115614f0557600080fd5b614f118d838e01614a1f565b909650945060c08c0135915080821115614f2a57600080fd5b50614f378c828d01614a1f565b915080935050809150509295985092959850929598565b600080600060608486031215614f6357600080fd5b8335925060208401359150604084013567ffffffffffffffff811115614f8857600080fd5b614f9486828701614a73565b9150509250925092565b60008060008060008060c08789031215614fb757600080fd5b863595506020870135945060408701359350606087013592506080870135614fde81615b0a565b915060a087013567ffffffffffffffff811115614ffa57600080fd5b61500689828a01614a73565b9150509295509295509295565b600080600080600060a0868803121561502b57600080fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561505e57600080fd5b61506a88828901614a73565b9150509295509295909350565b600081518084526020808501945080840160005b838110156150d9578151805188528381015163ffffffff168489015260409081015173ffffffffffffffffffffffffffffffffffffffff16908801526060909601959082019060010161508b565b509495945050505050565b600081518084526150fc8160208601602086016159e9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061014073ffffffffffffffffffffffffffffffffffffffff8084511685526020840151602086015260408401516151a1604087018273ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301525050565b50606084015160c086015260808401511660e085015260a083015161010085018290526151d0828601826150e4565b91505060c083015184820361012086015261333182826150e4565b600061014073ffffffffffffffffffffffffffffffffffffffff80845116855260208401516020860152604084015160408601526060840151615268606087018273ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301525050565b5060808401511660e085015260a083015161010085018290526151d0828601826150e4565b600073ffffffffffffffffffffffffffffffffffffffff808916835287602084015286604084015285606084015260c060808401526152cf60c08401866150e4565b915080841660a084015250979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808a16835288602084015287604084015286606084015285608084015260e060a084015261532d60e08401866150e4565b915080841660c08401525098975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015286604084015285606084015260c060808401526152cf60c08401866150e4565b600061014073ffffffffffffffffffffffffffffffffffffffff808b1684526153eb602085018b73ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015160608301525050565b8860a085015280881660c0850152508560e084015280610100840152615413818401866150e4565b905082810361012084015261542881856150e4565b9a9950505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff808816835286602084015285604084015260a0606084015261547260a08401866150e4565b91508084166080840152509695505050505050565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a602085015289604085015288606085015287608085015280871660a0850152508060c08401526154d9818401866150e4565b905082810360e08401526154ed81856150e4565b9b9a5050505050505050505050565b6020815260006135d66020830184615077565b6040815260006155226040830185615077565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b6020815260006135d6602083018461512e565b604081526000615522604083018561512e565b6020815260006135d660208301846151eb565b60408152600061552260408301856151eb565b61010081016155f582868051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b8360c083015273ffffffffffffffffffffffffffffffffffffffff831660e0830152949350505050565b83815260606020820152600061563860608301856150e4565b905073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b86815285602082015273ffffffffffffffffffffffffffffffffffffffff85166040820152836060820152821515608082015260e060a0820152600060e082015260006101008060c08401526156b6818401856150e4565b9998505050505050505050565b8481526020810184905260408101839052610120810161333160608301848051151582526020810151602083015260408101516040830152606081015173ffffffffffffffffffffffffffffffffffffffff8082166060850152608083015160808501528060a08401511660a085015250505050565b604051610120810167ffffffffffffffff8111828210171561575d5761575d615adb565b60405290565b60405160c0810167ffffffffffffffff8111828210171561575d5761575d615adb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156157cd576157cd615adb565b604052919050565b600067ffffffffffffffff8211156157ef576157ef615adb565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000821982111561582e5761582e615a4e565b500190565b600082615869577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b808511156158c757817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156158ad576158ad615a4e565b808516156158ba57918102915b93841c9390800290615873565b509250929050565b60006135d683836000826158e55750600161451f565b816158f25750600061451f565b816001811461590857600281146159125761592e565b600191505061451f565b60ff84111561592357615923615a4e565b50506001821b61451f565b5060208310610133831016604e8410600b8410161715615951575081810a61451f565b61595b838361586e565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561598d5761598d615a4e565b029392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156159cd576159cd615a4e565b500290565b6000828210156159e4576159e4615a4e565b500390565b60005b83811015615a045781810151838201526020016159ec565b8381111561497c5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615a4757615a47615a4e565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461306857600080fd5b801515811461306857600080fdfea26469706673582212200d8cfa74ce74f2a466506228a142efed155452eb712d237171312d105ff59b4364736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToBalanceOf(uint256,uint256,string)": {
        "params": {
          "_amount": "The amount of tokens to add, as a fixed point number with 18 decimals. If this is an ETH terminal, this is ignored and msg.value is used instead.",
          "_memo": "A memo to pass along to the emitted event.",
          "_projectId": "The ID of the project to which the funds received belong."
        }
      },
      "currentEthOverflowOf(uint256)": {
        "details": "The current overflow is represented as a fixed point number with 18 decimals.",
        "params": {
          "_projectId": "The ID of the project to get overflow for."
        },
        "returns": {
          "_0": "The current amount of ETH overflow that project has in this terminal, as a fixed point number with 18 decimals."
        }
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "details": "Payouts are sent to the preprogrammed splits. Any leftover is sent to the project's owner.Anyone can distribute payouts on a project's behalf. The project can preconfigure a wildcard split that is used to send funds to msg.sender. This can be used to incentivize calling this function.",
        "params": {
          "_amount": "The amount of terminal tokens to distribute, as a fixed point number with 18 decimals.",
          "_currency": "The expected currency of the amount being distributed. Must match the project's current funding cycle's distribution limit currency.",
          "_memo": "A memo to pass along to the emitted event.",
          "_minReturnedTokens": "The minimum number of terminal tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.",
          "_projectId": "The ID of the project having its payouts distributed."
        }
      },
      "heldFeesOf(uint256)": {
        "params": {
          "_projectId": "The ID of the project for which fees are being held."
        },
        "returns": {
          "_0": "An array of fees that are being held."
        }
      },
      "migrate(uint256,address)": {
        "details": "Only a project's owner or a designated operator can migrate it.",
        "params": {
          "_projectId": "The ID of the project being migrated.",
          "_to": "The terminal contract that will gain the project's funds."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pay(uint256,uint256,address,uint256,bool,string,bytes)": {
        "params": {
          "_amount": "The amount of terminal tokens being received, as a fixed point number with 18 decimals. If this terminal's token is ETH, this is ignored and msg.value is used in its place.",
          "_beneficiary": "The address to mint tokens for and pass along to the funding cycle's data source and delegate.",
          "_memo": "A memo to pass along to the emitted event, and passed along the the funding cycle's data source and delegate.",
          "_metadata": "Bytes to send along to the data source and delegate, if provided.",
          "_minReturnedTokens": "The minimum number of project tokens expected in return, as a fixed point",
          "_preferClaimedTokens": "A flag indicating whether the request prefers to issue tokens unstaked rather than staked.",
          "_projectId": "The ID of the project being paid."
        }
      },
      "processFees(uint256)": {
        "details": "Only a project owner, an operator, or the contract's owner can process held fees.",
        "params": {
          "_projectId": "The ID of the project whos held fees should be processed."
        }
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "details": "Only a token's holder or a designated operator can redeem it.",
        "params": {
          "_beneficiary": "The address to send the terminal tokens to.",
          "_holder": "The account to redeem tokens for.",
          "_memo": "A memo to pass along to the emitted event.",
          "_metadata": "Bytes to send along to the data source and delegate, if provided.",
          "_minReturnedTokens": "The minimum amount of terminal tokens expected in return, as a fixed point number with 18 decimals.",
          "_projectId": "The ID of the project to which the tokens being redeemed belong.",
          "_tokenCount": "The number of project tokens to redeem, as a fixed point number with 18 decimals."
        },
        "returns": {
          "reclaimAmount": "The amount of terminal tokens that the project tokens were redeemed for, as a fixed point number with 18 decimals."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFee(uint256)": {
        "details": "Only the owner of this contract can change the fee.",
        "params": {
          "_fee": "The new fee, out of MAX_FEE."
        }
      },
      "setFeeGauge(address)": {
        "details": "Only the owner of this contract can change the fee gauge.",
        "params": {
          "_feeGauge": "The new fee gauge."
        }
      },
      "toggleFeelessTerminal(address)": {
        "details": "Only the owner of this contract can change the fee.",
        "params": {
          "_terminal": "The terminal that can be paid towards while still bypassing fees."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address,string)": {
        "details": "Only a project's owner or a designated operator can use its allowance.",
        "params": {
          "_amount": "The amount of terminal tokens to use from this project's current allowance, as a fixed point number with 18 decimals.",
          "_beneficiary": "The address to send the funds to.",
          "_currency": "The expected currency of the amount being distributed. Must match the project's current funding cycle's overflow allowance currency.",
          "_memo": "A memo to pass along to the emitted event.",
          "_minReturnedTokens": "The minimum number of tokens that the `_amount` should be valued at in terms of this terminal's currency, as a fixed point number with 18 decimals.",
          "_projectId": "The ID of the project to use the allowance of."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "addToBalanceOf(uint256,uint256,string)": {
        "notice": "Receives funds belonging to the specified project."
      },
      "baseWeightCurrency()": {
        "notice": "The currency to base token issuance on."
      },
      "currency()": {
        "notice": "The currency to use when resolving price feeds for this terminal."
      },
      "currentEthOverflowOf(uint256)": {
        "notice": "Gets the current overflowed amount in this for a specified project, in terms of ETH."
      },
      "decimals()": {
        "notice": "The number of decimals the token fixed point amounts are expected to have."
      },
      "directory()": {
        "notice": "The directory of terminals and controllers for projects."
      },
      "distributePayoutsOf(uint256,uint256,uint256,uint256,string)": {
        "notice": "Distributes payouts for a project according to the constraints of its current funding cycle."
      },
      "fee()": {
        "notice": "The platform fee percent."
      },
      "feeGauge()": {
        "notice": "The data source that returns a discount to apply to a project's fee."
      },
      "heldFeesOf(uint256)": {
        "notice": "The fees that are currently being held to be processed later for each project."
      },
      "isFeelessTerminal(address)": {
        "notice": "Terminals that can be paid towards from this terminal without incurring a fee. _terminal The terminal that can be paid toward."
      },
      "migrate(uint256,address)": {
        "notice": "Allows a project owner to migrate its funds and operations to a new terminal of the same token type."
      },
      "operatorStore()": {
        "notice": " A contract storing operator assignments."
      },
      "pay(uint256,uint256,address,uint256,bool,string,bytes)": {
        "notice": "Contribute ETH to a project."
      },
      "payoutSplitsGroup()": {
        "notice": "The group that payout splits coming from this terminal are identified by."
      },
      "prices()": {
        "notice": "The contract that exposes price feeds."
      },
      "processFees(uint256)": {
        "notice": "Process any fees that are being held for the project."
      },
      "projects()": {
        "notice": "The Projects contract which mints ERC-721's that represent project ownership and transfers."
      },
      "redeemTokensOf(address,uint256,uint256,uint256,address,string,bytes)": {
        "notice": "Addresses can redeem their tokens to claim the project's overflowed tokens, or to trigger rules determined by the project's current funding cycle's data source."
      },
      "setFee(uint256)": {
        "notice": "Allows the fee to be updated."
      },
      "setFeeGauge(address)": {
        "notice": "Allows the fee gauge to be updated."
      },
      "splitsStore()": {
        "notice": "The contract that stores splits for each project."
      },
      "store()": {
        "notice": "The contract that stores and manages the terminal's data."
      },
      "toggleFeelessTerminal(address)": {
        "notice": "Toggles whether projects operating on this terminal can pay projects operating on other terminals without incurring a fee."
      },
      "token()": {
        "notice": "The token that this terminal accepts."
      },
      "useAllowanceOf(uint256,uint256,uint256,uint256,address,string)": {
        "notice": "Allows a project to send funds from its overflow up to the preconfigured allowance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 693,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12293,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "_heldFeesOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_struct(JBFee)16219_storage)dyn_storage)"
      },
      {
        "astId": 12341,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "fee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 12346,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "feeGauge",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IJBFeeGauge)14384"
      },
      {
        "astId": 12353,
        "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
        "label": "isFeelessTerminal",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_contract(IJBPaymentTerminal)14672,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(JBFee)16219_storage)dyn_storage": {
        "base": "t_struct(JBFee)16219_storage",
        "encoding": "dynamic_array",
        "label": "struct JBFee[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJBFeeGauge)14384": {
        "encoding": "inplace",
        "label": "contract IJBFeeGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IJBPaymentTerminal)14672": {
        "encoding": "inplace",
        "label": "contract IJBPaymentTerminal",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IJBPaymentTerminal)14672,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IJBPaymentTerminal)14672",
        "label": "mapping(contract IJBPaymentTerminal => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_struct(JBFee)16219_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct JBFee[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(JBFee)16219_storage)dyn_storage"
      },
      "t_struct(JBFee)16219_storage": {
        "encoding": "inplace",
        "label": "struct JBFee",
        "members": [
          {
            "astId": 16214,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16216,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 16218,
            "contract": "contracts/JBETHPaymentTerminal.sol:JBETHPaymentTerminal",
            "label": "beneficiary",
            "offset": 4,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}